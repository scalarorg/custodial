// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/btc/v1beta1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NetworkKind int32

const (
	Mainnet NetworkKind = 0
	Testnet NetworkKind = 1
)

var NetworkKind_name = map[int32]string{
	0: "NETWORK_KIND_MAINNET",
	1: "NETWORK_KIND_TESTNET",
}

var NetworkKind_value = map[string]int32{
	"NETWORK_KIND_MAINNET": 0,
	"NETWORK_KIND_TESTNET": 1,
}

func (x NetworkKind) String() string {
	return proto.EnumName(NetworkKind_name, int32(x))
}

func (NetworkKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b7463eb12e915150, []int{0}
}

type BatchedCommandsStatus int32

const (
	BatchNonExistent BatchedCommandsStatus = 0
	BatchSigning     BatchedCommandsStatus = 1
	BatchAborted     BatchedCommandsStatus = 2
	BatchSigned      BatchedCommandsStatus = 3
)

var BatchedCommandsStatus_name = map[int32]string{
	0: "BATCHED_COMMANDS_STATUS_UNSPECIFIED",
	1: "BATCHED_COMMANDS_STATUS_SIGNING",
	2: "BATCHED_COMMANDS_STATUS_ABORTED",
	3: "BATCHED_COMMANDS_STATUS_SIGNED",
}

var BatchedCommandsStatus_value = map[string]int32{
	"BATCHED_COMMANDS_STATUS_UNSPECIFIED": 0,
	"BATCHED_COMMANDS_STATUS_SIGNING":     1,
	"BATCHED_COMMANDS_STATUS_ABORTED":     2,
	"BATCHED_COMMANDS_STATUS_SIGNED":      3,
}

func (x BatchedCommandsStatus) String() string {
	return proto.EnumName(BatchedCommandsStatus_name, int32(x))
}

func (BatchedCommandsStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b7463eb12e915150, []int{1}
}

type Proof struct {
	Addresses  []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Weights    []string `protobuf:"bytes,2,rep,name=weights,proto3" json:"weights,omitempty"`
	Threshold  string   `protobuf:"bytes,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Signatures []string `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7463eb12e915150, []int{0}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func (m *Proof) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Proof) GetWeights() []string {
	if m != nil {
		return m.Weights
	}
	return nil
}

func (m *Proof) GetThreshold() string {
	if m != nil {
		return m.Threshold
	}
	return ""
}

func (m *Proof) GetSignatures() []string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func init() {
	proto.RegisterEnum("scalar.btc.v1beta1.NetworkKind", NetworkKind_name, NetworkKind_value)
	proto.RegisterEnum("scalar.btc.v1beta1.BatchedCommandsStatus", BatchedCommandsStatus_name, BatchedCommandsStatus_value)
	proto.RegisterType((*Proof)(nil), "scalar.btc.v1beta1.Proof")
}

func init() { proto.RegisterFile("scalar/btc/v1beta1/types.proto", fileDescriptor_b7463eb12e915150) }

var fileDescriptor_b7463eb12e915150 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6b, 0xd4, 0x40,
	0x14, 0xc6, 0x93, 0xb6, 0x5a, 0x3b, 0x2b, 0x18, 0xc2, 0x0a, 0x21, 0xc8, 0x18, 0x14, 0x41, 0x8a,
	0x6e, 0x28, 0xc5, 0xa3, 0x87, 0xec, 0x26, 0xad, 0x61, 0xd9, 0xd9, 0xb2, 0x99, 0x22, 0x78, 0x09,
	0x93, 0x64, 0x4c, 0x82, 0xdd, 0x99, 0x32, 0xf3, 0xd6, 0xd6, 0x83, 0x77, 0xd9, 0x93, 0xff, 0xc0,
	0x9e, 0xf4, 0xe0, 0x9f, 0xe2, 0xb1, 0x47, 0x8f, 0xb2, 0xfb, 0x87, 0x28, 0xc9, 0xd6, 0x5a, 0x10,
	0x7b, 0x7b, 0xf3, 0x7d, 0xdf, 0x6f, 0x1e, 0x3c, 0x3e, 0x84, 0x75, 0xce, 0x4e, 0x98, 0xf2, 0x33,
	0xc8, 0xfd, 0xf7, 0x7b, 0x19, 0x07, 0xb6, 0xe7, 0xc3, 0x87, 0x53, 0xae, 0x7b, 0xa7, 0x4a, 0x82,
	0xb4, 0xed, 0xb5, 0xdf, 0xcb, 0x20, 0xef, 0x5d, 0xfa, 0x6e, 0xb7, 0x94, 0xa5, 0x6c, 0x6d, 0xbf,
	0x99, 0xd6, 0xc9, 0x47, 0x1f, 0xd1, 0xad, 0x23, 0x25, 0xe5, 0x5b, 0xfb, 0x01, 0xda, 0x61, 0x45,
	0xa1, 0xb8, 0xd6, 0x5c, 0x3b, 0xa6, 0xb7, 0xf9, 0x74, 0x67, 0xf2, 0x57, 0xb0, 0x1d, 0xb4, 0x7d,
	0xc6, 0xeb, 0xb2, 0x02, 0xed, 0x6c, 0xb4, 0xde, 0x9f, 0x67, 0xc3, 0x41, 0xa5, 0xb8, 0xae, 0xe4,
	0x49, 0xe1, 0x6c, 0x7a, 0x66, 0xc3, 0x5d, 0x09, 0x36, 0x46, 0x48, 0xd7, 0xa5, 0x60, 0x30, 0x53,
	0x5c, 0x3b, 0x5b, 0x2d, 0x7a, 0x4d, 0xd9, 0xe5, 0xa8, 0x43, 0x38, 0x9c, 0x49, 0xf5, 0x6e, 0x58,
	0x8b, 0xc2, 0x7e, 0x82, 0xba, 0x24, 0xa2, 0xaf, 0xc7, 0x93, 0x61, 0x3a, 0x8c, 0x49, 0x98, 0x8e,
	0x82, 0x98, 0x90, 0x88, 0x5a, 0x86, 0xdb, 0x99, 0x2f, 0xbc, 0xed, 0x11, 0xab, 0x85, 0xe0, 0xf0,
	0x4f, 0x8c, 0x46, 0x09, 0x6d, 0x62, 0xe6, 0x3a, 0x46, 0xb9, 0x06, 0xc1, 0xc1, 0xbd, 0xf3, 0xe9,
	0x0b, 0x36, 0xbe, 0x7d, 0xc5, 0xe6, 0xee, 0x2f, 0x13, 0xdd, 0xef, 0x33, 0xc8, 0x2b, 0x5e, 0x0c,
	0xe4, 0x74, 0xca, 0x44, 0xa1, 0x13, 0x60, 0x30, 0xd3, 0xf6, 0x4b, 0xf4, 0xb8, 0x1f, 0xd0, 0xc1,
	0xab, 0x28, 0x4c, 0x07, 0xe3, 0xd1, 0x28, 0x20, 0x61, 0x92, 0x26, 0x34, 0xa0, 0xc7, 0x49, 0x7a,
	0x4c, 0x92, 0xa3, 0x68, 0x10, 0x1f, 0xc4, 0x51, 0x68, 0x19, 0x6e, 0x77, 0xbe, 0xf0, 0xac, 0xf6,
	0x0f, 0x22, 0x45, 0x74, 0x5e, 0x6b, 0xe0, 0x02, 0xec, 0x17, 0xe8, 0xe1, 0xff, 0xf0, 0x24, 0x3e,
	0x24, 0x31, 0x39, 0xb4, 0x4c, 0xd7, 0x9a, 0x2f, 0xbc, 0xbb, 0x2d, 0x9a, 0xd4, 0xa5, 0xa8, 0x45,
	0x79, 0x13, 0x16, 0xf4, 0xc7, 0x13, 0x1a, 0x85, 0xd6, 0xc6, 0x35, 0x2c, 0xc8, 0xa4, 0x02, 0x5e,
	0xd8, 0xfb, 0x08, 0xdf, 0xb4, 0x2d, 0x0a, 0xad, 0x4d, 0xf7, 0xde, 0x7c, 0xe1, 0x75, 0xae, 0x96,
	0xf1, 0xc2, 0xdd, 0x6a, 0xae, 0xd0, 0x3f, 0xf8, 0xbe, 0xc4, 0xe6, 0xc5, 0x12, 0x9b, 0x3f, 0x97,
	0xd8, 0xfc, 0xbc, 0xc2, 0xc6, 0xc5, 0x0a, 0x1b, 0x3f, 0x56, 0xd8, 0x78, 0xf3, 0xac, 0xac, 0xa1,
	0x9a, 0x65, 0xbd, 0x5c, 0x4e, 0xfd, 0x75, 0x6d, 0xa4, 0x2a, 0x2f, 0xa7, 0xe7, 0xb9, 0x54, 0xdc,
	0x3f, 0x6f, 0x7b, 0xd6, 0xf6, 0x2b, 0xbb, 0xdd, 0xd6, 0x66, 0xff, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xa9, 0x6d, 0x56, 0x36, 0x82, 0x02, 0x00, 0x00,
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Threshold) > 0 {
		i -= len(m.Threshold)
		copy(dAtA[i:], m.Threshold)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Threshold)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Weights) > 0 {
		for iNdEx := len(m.Weights) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Weights[iNdEx])
			copy(dAtA[i:], m.Weights[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Weights[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Weights) > 0 {
		for _, s := range m.Weights {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.Threshold)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, s := range m.Signatures {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weights = append(m.Weights, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
