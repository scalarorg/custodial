// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/btc/v1beta1/types.proto

package types

import (
	fmt "fmt"
	github_com_axelarnetwork_axelar_core_x_multisig_exported "github.com/axelarnetwork/axelar-core/x/multisig/exported"
	github_com_axelarnetwork_axelar_core_x_nexus_exported "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	github_com_axelarnetwork_axelar_core_x_vote_exported "github.com/axelarnetwork/axelar-core/x/vote/exported"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NetworkKind int32

const (
	Mainnet NetworkKind = 0
	Testnet NetworkKind = 1
)

var NetworkKind_name = map[int32]string{
	0: "NETWORK_KIND_MAINNET",
	1: "NETWORK_KIND_TESTNET",
}

var NetworkKind_value = map[string]int32{
	"NETWORK_KIND_MAINNET": 0,
	"NETWORK_KIND_TESTNET": 1,
}

func (x NetworkKind) String() string {
	return proto.EnumName(NetworkKind_name, int32(x))
}

func (NetworkKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b7463eb12e915150, []int{0}
}

type BatchedCommandsStatus int32

const (
	BatchNonExistent BatchedCommandsStatus = 0
	BatchSigning     BatchedCommandsStatus = 1
	BatchAborted     BatchedCommandsStatus = 2
	BatchSigned      BatchedCommandsStatus = 3
)

var BatchedCommandsStatus_name = map[int32]string{
	0: "BATCHED_COMMANDS_STATUS_UNSPECIFIED",
	1: "BATCHED_COMMANDS_STATUS_SIGNING",
	2: "BATCHED_COMMANDS_STATUS_ABORTED",
	3: "BATCHED_COMMANDS_STATUS_SIGNED",
}

var BatchedCommandsStatus_value = map[string]int32{
	"BATCHED_COMMANDS_STATUS_UNSPECIFIED": 0,
	"BATCHED_COMMANDS_STATUS_SIGNING":     1,
	"BATCHED_COMMANDS_STATUS_ABORTED":     2,
	"BATCHED_COMMANDS_STATUS_SIGNED":      3,
}

func (x BatchedCommandsStatus) String() string {
	return proto.EnumName(BatchedCommandsStatus_name, int32(x))
}

func (BatchedCommandsStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b7463eb12e915150, []int{1}
}

type StakingTxStatus int32

const (
	StakingTxStatus_None      StakingTxStatus = 0
	StakingTxStatus_Pending   StakingTxStatus = 1
	StakingTxStatus_Confirmed StakingTxStatus = 2
	StakingTxStatus_Completed StakingTxStatus = 3
)

var StakingTxStatus_name = map[int32]string{
	0: "STAKING_TX_STATUS_UNSPECIFIED",
	1: "STAKING_TX_STATUS_PENDING",
	2: "STAKING_TX_STATUS_CONFIRMED",
	3: "STAKING_TX_STATUS_COMPLETED",
}

var StakingTxStatus_value = map[string]int32{
	"STAKING_TX_STATUS_UNSPECIFIED": 0,
	"STAKING_TX_STATUS_PENDING":     1,
	"STAKING_TX_STATUS_CONFIRMED":   2,
	"STAKING_TX_STATUS_COMPLETED":   3,
}

func (x StakingTxStatus) String() string {
	return proto.EnumName(StakingTxStatus_name, int32(x))
}

func (StakingTxStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b7463eb12e915150, []int{2}
}

type CommandType int32

const (
	COMMAND_TYPE_APPROVE_CONTRACT_CALL CommandType = 0
)

var CommandType_name = map[int32]string{
	0: "COMMAND_TYPE_APPROVE_CONTRACT_CALL",
}

var CommandType_value = map[string]int32{
	"COMMAND_TYPE_APPROVE_CONTRACT_CALL": 0,
}

func (CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b7463eb12e915150, []int{3}
}

type Proof struct {
	Addresses  []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Weights    []string `protobuf:"bytes,2,rep,name=weights,proto3" json:"weights,omitempty"`
	Threshold  string   `protobuf:"bytes,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Signatures []string `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7463eb12e915150, []int{0}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func (m *Proof) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Proof) GetWeights() []string {
	if m != nil {
		return m.Weights
	}
	return nil
}

func (m *Proof) GetThreshold() string {
	if m != nil {
		return m.Threshold
	}
	return ""
}

func (m *Proof) GetSignatures() []string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type PollMapping struct {
	TxID   Hash                                                        `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3,customtype=Hash" json:"tx_id"`
	PollID github_com_axelarnetwork_axelar_core_x_vote_exported.PollID `protobuf:"varint,2,opt,name=poll_id,json=pollId,proto3,customtype=github.com/axelarnetwork/axelar-core/x/vote/exported.PollID" json:"poll_id"`
}

func (m *PollMapping) Reset()         { *m = PollMapping{} }
func (m *PollMapping) String() string { return proto.CompactTextString(m) }
func (*PollMapping) ProtoMessage()    {}
func (*PollMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7463eb12e915150, []int{1}
}
func (m *PollMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollMapping.Merge(m, src)
}
func (m *PollMapping) XXX_Size() int {
	return m.Size()
}
func (m *PollMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_PollMapping.DiscardUnknown(m)
}

var xxx_messageInfo_PollMapping proto.InternalMessageInfo

type PollMetadata struct {
	Chain github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName `protobuf:"bytes,1,opt,name=chain,proto3,casttype=github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" json:"chain,omitempty"`
	TxID  Hash                                                            `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3,customtype=Hash" json:"tx_id"`
}

func (m *PollMetadata) Reset()         { *m = PollMetadata{} }
func (m *PollMetadata) String() string { return proto.CompactTextString(m) }
func (*PollMetadata) ProtoMessage()    {}
func (*PollMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7463eb12e915150, []int{2}
}
func (m *PollMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollMetadata.Merge(m, src)
}
func (m *PollMetadata) XXX_Size() int {
	return m.Size()
}
func (m *PollMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_PollMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_PollMetadata proto.InternalMessageInfo

func (m *PollMetadata) GetChain() github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName {
	if m != nil {
		return m.Chain
	}
	return ""
}

type StakingTx struct {
	TxID                        Hash                                                            `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3,customtype=Hash" json:"tx_id"`
	Amount                      github_com_cosmos_cosmos_sdk_types.Uint                         `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
	Asset                       string                                                          `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	DestinationChain            github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName `protobuf:"bytes,4,opt,name=destination_chain,json=destinationChain,proto3,casttype=github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" json:"destination_chain,omitempty"`
	DestinationRecipientAddress Address                                                         `protobuf:"bytes,5,opt,name=destination_recipient_address,json=destinationRecipientAddress,proto3,customtype=Address" json:"destination_recipient_address"`
	LogIndex                    uint64                                                          `protobuf:"varint,6,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
}

func (m *StakingTx) Reset()         { *m = StakingTx{} }
func (m *StakingTx) String() string { return proto.CompactTextString(m) }
func (*StakingTx) ProtoMessage()    {}
func (*StakingTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7463eb12e915150, []int{3}
}
func (m *StakingTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingTx.Merge(m, src)
}
func (m *StakingTx) XXX_Size() int {
	return m.Size()
}
func (m *StakingTx) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingTx.DiscardUnknown(m)
}

var xxx_messageInfo_StakingTx proto.InternalMessageInfo

func (m *StakingTx) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *StakingTx) GetDestinationChain() github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName {
	if m != nil {
		return m.DestinationChain
	}
	return ""
}

func (m *StakingTx) GetLogIndex() uint64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

type CommandBatchMetadata struct {
	ID                    []byte                                                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CommandIDs            []CommandID                                                    `protobuf:"bytes,2,rep,name=command_ids,json=commandIds,proto3,customtype=CommandID" json:"command_ids"`
	Data                  []byte                                                         `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	SigHash               Hash                                                           `protobuf:"bytes,4,opt,name=sig_hash,json=sigHash,proto3,customtype=Hash" json:"sig_hash"`
	Status                BatchedCommandsStatus                                          `protobuf:"varint,5,opt,name=status,proto3,enum=scalar.btc.v1beta1.BatchedCommandsStatus" json:"status,omitempty"`
	KeyID                 github_com_axelarnetwork_axelar_core_x_multisig_exported.KeyID `protobuf:"bytes,6,opt,name=key_id,json=keyId,proto3,casttype=github.com/axelarnetwork/axelar-core/x/multisig/exported.KeyID" json:"key_id,omitempty"`
	PrevBatchedCommandsID []byte                                                         `protobuf:"bytes,7,opt,name=prev_batched_commands_id,json=prevBatchedCommandsId,proto3" json:"prev_batched_commands_id,omitempty"`
	Signature             *types.Any                                                     `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *CommandBatchMetadata) Reset()         { *m = CommandBatchMetadata{} }
func (m *CommandBatchMetadata) String() string { return proto.CompactTextString(m) }
func (*CommandBatchMetadata) ProtoMessage()    {}
func (*CommandBatchMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7463eb12e915150, []int{4}
}
func (m *CommandBatchMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandBatchMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandBatchMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandBatchMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandBatchMetadata.Merge(m, src)
}
func (m *CommandBatchMetadata) XXX_Size() int {
	return m.Size()
}
func (m *CommandBatchMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandBatchMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CommandBatchMetadata proto.InternalMessageInfo

func (m *CommandBatchMetadata) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *CommandBatchMetadata) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CommandBatchMetadata) GetStatus() BatchedCommandsStatus {
	if m != nil {
		return m.Status
	}
	return BatchNonExistent
}

func (m *CommandBatchMetadata) GetKeyID() github_com_axelarnetwork_axelar_core_x_multisig_exported.KeyID {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *CommandBatchMetadata) GetPrevBatchedCommandsID() []byte {
	if m != nil {
		return m.PrevBatchedCommandsID
	}
	return nil
}

func (m *CommandBatchMetadata) GetSignature() *types.Any {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Command struct {
	ID     CommandID                                                      `protobuf:"bytes,1,opt,name=id,proto3,customtype=CommandID" json:"id"`
	Params []byte                                                         `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	KeyID  github_com_axelarnetwork_axelar_core_x_multisig_exported.KeyID `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3,casttype=github.com/axelarnetwork/axelar-core/x/multisig/exported.KeyID" json:"key_id,omitempty"`
	Type   CommandType                                                    `protobuf:"varint,4,opt,name=type,proto3,enum=scalar.btc.v1beta1.CommandType" json:"type,omitempty"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7463eb12e915150, []int{5}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetParams() []byte {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Command) GetKeyID() github_com_axelarnetwork_axelar_core_x_multisig_exported.KeyID {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *Command) GetType() CommandType {
	if m != nil {
		return m.Type
	}
	return COMMAND_TYPE_APPROVE_CONTRACT_CALL
}

func init() {
	proto.RegisterEnum("scalar.btc.v1beta1.NetworkKind", NetworkKind_name, NetworkKind_value)
	proto.RegisterEnum("scalar.btc.v1beta1.BatchedCommandsStatus", BatchedCommandsStatus_name, BatchedCommandsStatus_value)
	proto.RegisterEnum("scalar.btc.v1beta1.StakingTxStatus", StakingTxStatus_name, StakingTxStatus_value)
	proto.RegisterEnum("scalar.btc.v1beta1.CommandType", CommandType_name, CommandType_value)
	proto.RegisterType((*Proof)(nil), "scalar.btc.v1beta1.Proof")
	proto.RegisterType((*PollMapping)(nil), "scalar.btc.v1beta1.PollMapping")
	proto.RegisterType((*PollMetadata)(nil), "scalar.btc.v1beta1.PollMetadata")
	proto.RegisterType((*StakingTx)(nil), "scalar.btc.v1beta1.StakingTx")
	proto.RegisterType((*CommandBatchMetadata)(nil), "scalar.btc.v1beta1.CommandBatchMetadata")
	proto.RegisterType((*Command)(nil), "scalar.btc.v1beta1.Command")
}

func init() { proto.RegisterFile("scalar/btc/v1beta1/types.proto", fileDescriptor_b7463eb12e915150) }

var fileDescriptor_b7463eb12e915150 = []byte{
	// 1213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x8f, 0x1a, 0xc7,
	0x12, 0x67, 0x58, 0xfe, 0x2c, 0x0d, 0xcf, 0xe6, 0xb5, 0xb0, 0x1f, 0xc6, 0xcf, 0x80, 0x78, 0x7a,
	0xf6, 0x7a, 0x13, 0x83, 0x6c, 0x2b, 0xa7, 0x28, 0x71, 0x06, 0x18, 0xaf, 0x47, 0x6b, 0x66, 0xd1,
	0x30, 0x4e, 0xe2, 0x1c, 0x32, 0x6a, 0x98, 0xde, 0x61, 0xb4, 0x43, 0xf7, 0x68, 0xba, 0x59, 0xc3,
	0x21, 0x77, 0x6b, 0x4f, 0x39, 0xe4, 0xba, 0x52, 0xa4, 0xe4, 0x90, 0x0f, 0x90, 0x0f, 0x61, 0xe5,
	0xe4, 0x43, 0x0e, 0x51, 0x0e, 0x28, 0x62, 0x3f, 0x45, 0x7c, 0x49, 0x34, 0x3d, 0xbd, 0x2c, 0xca,
	0xae, 0x1d, 0x47, 0x4a, 0x4e, 0x74, 0x75, 0xd7, 0xaf, 0xaa, 0x7f, 0x55, 0xbf, 0xea, 0x01, 0x54,
	0xd9, 0x08, 0xf9, 0x28, 0x6c, 0x0d, 0xf9, 0xa8, 0x75, 0x78, 0x77, 0x88, 0x39, 0xba, 0xdb, 0xe2,
	0xf3, 0x00, 0xb3, 0x66, 0x10, 0x52, 0x4e, 0x21, 0x8c, 0xcf, 0x9b, 0x43, 0x3e, 0x6a, 0xca, 0xf3,
	0x4a, 0xc9, 0xa5, 0x2e, 0x15, 0xc7, 0xad, 0x68, 0x15, 0x7b, 0x56, 0xae, 0xb9, 0x94, 0xba, 0x3e,
	0x6e, 0x09, 0x6b, 0x38, 0xdd, 0x6f, 0x21, 0x32, 0x3f, 0x3d, 0x1a, 0x51, 0x36, 0xa1, 0xcc, 0x8e,
	0x31, 0xb1, 0x11, 0x1f, 0x35, 0xbe, 0x00, 0xe9, 0x7e, 0x48, 0xe9, 0x3e, 0xfc, 0x2f, 0xc8, 0x21,
	0xc7, 0x09, 0x31, 0x63, 0x98, 0x95, 0x95, 0xfa, 0xc6, 0x56, 0xce, 0x3c, 0xdb, 0x80, 0x65, 0x90,
	0x7d, 0x86, 0x3d, 0x77, 0xcc, 0x59, 0x39, 0x29, 0xce, 0x4e, 0xcd, 0x08, 0xc7, 0xc7, 0x21, 0x66,
	0x63, 0xea, 0x3b, 0xe5, 0x8d, 0xba, 0x12, 0xe1, 0x56, 0x1b, 0xb0, 0x0a, 0x00, 0xf3, 0x5c, 0x82,
	0xf8, 0x34, 0xc4, 0xac, 0x9c, 0x12, 0xd0, 0xb5, 0x9d, 0xc6, 0xd7, 0x0a, 0xc8, 0xf7, 0xa9, 0xef,
	0xf7, 0x50, 0x10, 0x78, 0xc4, 0x85, 0xb7, 0x41, 0x9a, 0xcf, 0x6c, 0xcf, 0x29, 0x2b, 0x75, 0x65,
	0xab, 0xd0, 0x2e, 0xbd, 0x58, 0xd4, 0x12, 0x3f, 0x2f, 0x6a, 0xa9, 0x47, 0x88, 0x8d, 0x97, 0x8b,
	0x5a, 0xca, 0x9a, 0xe9, 0x5d, 0x33, 0xc5, 0x67, 0xba, 0x03, 0xf7, 0x41, 0x36, 0xa0, 0xbe, 0x1f,
	0x39, 0x27, 0xeb, 0xca, 0x56, 0xaa, 0xdd, 0x93, 0xce, 0xef, 0xbb, 0x1e, 0x1f, 0x4f, 0x87, 0xcd,
	0x11, 0x9d, 0xb4, 0xd0, 0x0c, 0xfb, 0x28, 0x24, 0x98, 0x3f, 0xa3, 0xe1, 0x81, 0xb4, 0xee, 0x8c,
	0x68, 0x88, 0x5b, 0xb3, 0xd6, 0x21, 0xe5, 0xb8, 0x85, 0x67, 0x01, 0x0d, 0x39, 0x76, 0x9a, 0xd1,
	0x2d, 0xf4, 0xee, 0x72, 0x51, 0xcb, 0xc4, 0x2b, 0x33, 0x13, 0x45, 0xd7, 0x9d, 0xc6, 0x57, 0x0a,
	0x28, 0x88, 0x2b, 0x62, 0x8e, 0x1c, 0xc4, 0x11, 0x7c, 0x0a, 0xd2, 0xa3, 0x31, 0xf2, 0x88, 0xb8,
	0x63, 0xae, 0xdd, 0x79, 0xb5, 0xa8, 0x3d, 0x78, 0xcb, 0x94, 0x04, 0xcf, 0xa6, 0xec, 0x2c, 0x67,
	0x27, 0x0a, 0x63, 0xa0, 0x09, 0x36, 0xe3, 0x88, 0x67, 0xf4, 0x93, 0x7f, 0x46, 0xbf, 0xf1, 0x6b,
	0x12, 0xe4, 0x06, 0x1c, 0x1d, 0x78, 0xc4, 0xb5, 0x66, 0x7f, 0xa5, 0x6e, 0x3b, 0x20, 0x83, 0x26,
	0x74, 0x4a, 0xb8, 0x4c, 0xd2, 0x92, 0xbe, 0xb7, 0xd6, 0x38, 0xc4, 0x12, 0x91, 0x3f, 0x77, 0x98,
	0x73, 0x20, 0x35, 0xf9, 0xc4, 0x23, 0xdc, 0x94, 0x70, 0x58, 0x02, 0x69, 0xc4, 0x18, 0xe6, 0xb2,
	0xeb, 0xb1, 0x01, 0x03, 0xf0, 0x6f, 0x07, 0x33, 0xee, 0x11, 0xc4, 0x3d, 0x4a, 0xec, 0xb8, 0x52,
	0xa9, 0xbf, 0xaf, 0x52, 0xc5, 0xb5, 0xe8, 0x62, 0x17, 0x0e, 0xc0, 0x8d, 0xf5, 0x8c, 0x21, 0x1e,
	0x79, 0x81, 0x87, 0x09, 0xb7, 0xa5, 0x7c, 0xcb, 0x69, 0xc1, 0xf3, 0xb2, 0xe4, 0x99, 0x55, 0xe3,
	0x6d, 0xf3, 0xfa, 0x1a, 0xca, 0x3c, 0x05, 0xc9, 0x43, 0x78, 0x1d, 0xe4, 0x7c, 0xea, 0xda, 0x1e,
	0x71, 0xf0, 0xac, 0x9c, 0x89, 0xf4, 0x65, 0x6e, 0xfa, 0xd4, 0xd5, 0x23, 0xbb, 0xf1, 0x3c, 0x05,
	0x4a, 0x1d, 0x3a, 0x99, 0x20, 0xe2, 0xb4, 0x11, 0x1f, 0x8d, 0x57, 0xd2, 0xb8, 0x0a, 0x92, 0xab,
	0x1e, 0x64, 0x96, 0x8b, 0x5a, 0x52, 0xef, 0x9a, 0x49, 0xcf, 0x81, 0x1f, 0x81, 0xfc, 0x28, 0xf6,
	0xb7, 0x3d, 0x27, 0x1e, 0xa1, 0x42, 0xbb, 0x26, 0x2f, 0x94, 0x93, 0xa1, 0x84, 0xfa, 0xc0, 0xca,
	0x60, 0x26, 0x90, 0x18, 0xdd, 0x61, 0x10, 0x82, 0x54, 0x94, 0x41, 0xd4, 0xba, 0x60, 0x8a, 0x35,
	0xbc, 0x05, 0x36, 0x99, 0xe7, 0xda, 0x63, 0xc4, 0xc6, 0xa2, 0xc2, 0x85, 0x76, 0x61, 0xbd, 0xef,
	0x66, 0x96, 0x79, 0x6e, 0xb4, 0x80, 0x2a, 0xc8, 0x30, 0x8e, 0xf8, 0x34, 0x2e, 0xc5, 0xa5, 0x7b,
	0xb7, 0x9b, 0xe7, 0x5f, 0x95, 0xa6, 0x60, 0x82, 0x1d, 0x99, 0x9f, 0x0d, 0x04, 0xc0, 0x94, 0x40,
	0x38, 0x04, 0x99, 0x03, 0x3c, 0x8f, 0x14, 0x96, 0x11, 0xbd, 0xdc, 0x5d, 0x2e, 0x6a, 0xe9, 0x5d,
	0x3c, 0xd7, 0xbb, 0xaf, 0x16, 0xb5, 0x0f, 0xdf, 0xb2, 0xa9, 0x93, 0xa9, 0xcf, 0x3d, 0xe6, 0xb9,
	0x67, 0x7d, 0x15, 0x11, 0xcc, 0xf4, 0x01, 0x9e, 0xeb, 0x0e, 0x34, 0x41, 0x39, 0x08, 0xf1, 0xa1,
	0x3d, 0x8c, 0x6f, 0x62, 0x4b, 0xfa, 0x2c, 0xca, 0x9a, 0x15, 0xfc, 0xae, 0x2d, 0x17, 0xb5, 0x2b,
	0xfd, 0x10, 0x1f, 0xfe, 0xe1, 0xb2, 0x7a, 0xd7, 0xbc, 0x12, 0x5c, 0xb0, 0xed, 0xc0, 0xcf, 0x41,
	0x6e, 0xf5, 0xdc, 0x94, 0x37, 0xeb, 0xca, 0x56, 0xfe, 0x5e, 0xa9, 0x19, 0xbf, 0x94, 0xcd, 0xd3,
	0x97, 0xb2, 0xa9, 0x92, 0x79, 0x7b, 0xfb, 0x87, 0xef, 0xef, 0xdc, 0xbc, 0x68, 0x04, 0x1c, 0x3c,
	0x6a, 0xf5, 0x23, 0xcf, 0x1e, 0x0a, 0xd9, 0x18, 0xf9, 0x38, 0x34, 0xcf, 0x42, 0x36, 0x4e, 0x14,
	0x90, 0x95, 0xe9, 0xe0, 0xad, 0xb5, 0xee, 0xff, 0xe7, 0xa2, 0xe6, 0x9e, 0xca, 0xe1, 0x2a, 0xc8,
	0x04, 0x28, 0x44, 0x13, 0x16, 0x8f, 0xa0, 0x29, 0xad, 0xb5, 0x22, 0x6f, 0xfc, 0x63, 0x45, 0xbe,
	0x0f, 0x52, 0xd1, 0x2c, 0x0b, 0xc1, 0x5c, 0xba, 0x57, 0xbb, 0x48, 0x09, 0xf2, 0xca, 0xd6, 0x3c,
	0xc0, 0xa6, 0x70, 0xde, 0xc6, 0x20, 0x6f, 0xc4, 0xc9, 0x76, 0x3d, 0xe2, 0xc0, 0xff, 0x83, 0x92,
	0xa1, 0x59, 0x9f, 0xec, 0x99, 0xbb, 0xf6, 0xae, 0x6e, 0x74, 0xed, 0x9e, 0xaa, 0x1b, 0x86, 0x66,
	0x15, 0x13, 0x95, 0xfc, 0xd1, 0x71, 0x3d, 0xdb, 0x43, 0x1e, 0x21, 0x98, 0x9f, 0x73, 0xb3, 0xb4,
	0x81, 0x15, 0xb9, 0x29, 0xb1, 0x9b, 0x85, 0x19, 0x27, 0x98, 0x57, 0x36, 0x9f, 0x7f, 0x53, 0x4d,
	0x7c, 0xf7, 0x6d, 0x55, 0xd9, 0xfe, 0x4d, 0x01, 0x57, 0x2e, 0x94, 0x21, 0xfc, 0x00, 0xfc, 0xaf,
	0xad, 0x5a, 0x9d, 0x47, 0x5a, 0xd7, 0xee, 0xec, 0xf5, 0x7a, 0xaa, 0xd1, 0x1d, 0xd8, 0x03, 0x4b,
	0xb5, 0x9e, 0x0c, 0xec, 0x27, 0xc6, 0xa0, 0xaf, 0x75, 0xf4, 0x87, 0xba, 0xd6, 0x2d, 0x26, 0x2a,
	0xa5, 0xa3, 0xe3, 0x7a, 0x51, 0xc4, 0x30, 0x28, 0xd1, 0x66, 0x1e, 0xe3, 0x98, 0x70, 0xf8, 0x1e,
	0xa8, 0xbd, 0x0e, 0x3e, 0xd0, 0x77, 0x0c, 0xdd, 0xd8, 0x29, 0x2a, 0x95, 0xe2, 0xd1, 0x71, 0xbd,
	0x20, 0xa0, 0x03, 0xcf, 0x25, 0xd1, 0xd7, 0xe8, 0x0d, 0x30, 0xb5, 0xbd, 0x67, 0x5a, 0x5a, 0xb7,
	0x98, 0x5c, 0x83, 0xa9, 0x43, 0x51, 0x6f, 0x78, 0x1f, 0x54, 0xdf, 0x94, 0x4d, 0xeb, 0x16, 0x37,
	0x2a, 0x97, 0x8f, 0x8e, 0xeb, 0xf9, 0x55, 0x32, 0xec, 0x54, 0x52, 0x51, 0x15, 0xb6, 0x7f, 0x54,
	0xc0, 0xe5, 0xd5, 0xab, 0x2e, 0xb9, 0xbf, 0x03, 0x6e, 0x0c, 0x2c, 0x75, 0x57, 0x37, 0x76, 0x6c,
	0xeb, 0xd3, 0x8b, 0x59, 0x6f, 0x1e, 0x1d, 0xd7, 0x53, 0x06, 0x25, 0x18, 0x6e, 0x83, 0x6b, 0xe7,
	0x9d, 0xfb, 0x9a, 0xd1, 0x8d, 0x39, 0x8a, 0xc2, 0xf7, 0x31, 0x71, 0x22, 0x7a, 0x4d, 0x70, 0xfd,
	0xbc, 0x6f, 0x67, 0xcf, 0x78, 0xa8, 0x9b, 0x3d, 0x41, 0xed, 0x5f, 0x47, 0xc7, 0xf5, 0x5c, 0x87,
	0x92, 0x7d, 0x2f, 0x9c, 0x60, 0xe7, 0x75, 0xfe, 0xbd, 0xfe, 0x63, 0xcd, 0x12, 0xa4, 0xa4, 0xff,
	0x24, 0xf0, 0x31, 0xc7, 0x8e, 0x68, 0xac, 0x22, 0x1a, 0xfb, 0x00, 0xe4, 0xd7, 0x44, 0x05, 0x6f,
	0x82, 0x86, 0x2c, 0x8c, 0x6d, 0x3d, 0xed, 0x6b, 0xb6, 0xda, 0xef, 0x9b, 0x7b, 0x1f, 0x6b, 0x51,
	0x6e, 0xcb, 0x54, 0x3b, 0x96, 0xdd, 0x51, 0x1f, 0x3f, 0x8e, 0x68, 0x49, 0x65, 0x24, 0xda, 0x0f,
	0x5f, 0x2c, 0xab, 0xca, 0xcb, 0x65, 0x55, 0xf9, 0x65, 0x59, 0x55, 0xbe, 0x3c, 0xa9, 0x26, 0x5e,
	0x9e, 0x54, 0x13, 0x3f, 0x9d, 0x54, 0x13, 0x9f, 0xbd, 0xbb, 0x36, 0x16, 0xb1, 0x96, 0x69, 0xe8,
	0xca, 0xd5, 0xe9, 0x48, 0x44, 0x7f, 0xae, 0xc4, 0x07, 0x6c, 0x98, 0x11, 0x33, 0x7f, 0xff, 0xf7,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x10, 0x14, 0xef, 0x77, 0x09, 0x00, 0x00,
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Threshold) > 0 {
		i -= len(m.Threshold)
		copy(dAtA[i:], m.Threshold)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Threshold)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Weights) > 0 {
		for iNdEx := len(m.Weights) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Weights[iNdEx])
			copy(dAtA[i:], m.Weights[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Weights[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PollMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PollID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PollID))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.TxID.Size()
		i -= size
		if _, err := m.TxID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PollMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TxID.Size()
		i -= size
		if _, err := m.TxID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.DestinationRecipientAddress.Size()
		i -= size
		if _, err := m.DestinationRecipientAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DestinationChain) > 0 {
		i -= len(m.DestinationChain)
		copy(dAtA[i:], m.DestinationChain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TxID.Size()
		i -= size
		if _, err := m.TxID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CommandBatchMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandBatchMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandBatchMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.PrevBatchedCommandsID) > 0 {
		i -= len(m.PrevBatchedCommandsID)
		copy(dAtA[i:], m.PrevBatchedCommandsID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PrevBatchedCommandsID)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.SigHash.Size()
		i -= size
		if _, err := m.SigHash.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CommandIDs) > 0 {
		for iNdEx := len(m.CommandIDs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.CommandIDs[iNdEx].Size()
				i -= size
				if _, err := m.CommandIDs[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Params) > 0 {
		i -= len(m.Params)
		copy(dAtA[i:], m.Params)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Params)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Weights) > 0 {
		for _, s := range m.Weights {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.Threshold)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, s := range m.Signatures {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PollMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TxID.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.PollID != 0 {
		n += 1 + sovTypes(uint64(m.PollID))
	}
	return n
}

func (m *PollMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.TxID.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *StakingTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TxID.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.DestinationChain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.DestinationRecipientAddress.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.LogIndex != 0 {
		n += 1 + sovTypes(uint64(m.LogIndex))
	}
	return n
}

func (m *CommandBatchMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.CommandIDs) > 0 {
		for _, e := range m.CommandIDs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.SigHash.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PrevBatchedCommandsID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Params)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weights = append(m.Weights, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollID", wireType)
			}
			m.PollID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollID |= github_com_axelarnetwork_axelar_core_x_vote_exported.PollID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChain = github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationRecipientAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DestinationRecipientAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandBatchMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandBatchMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandBatchMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandIDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v CommandID
			m.CommandIDs = append(m.CommandIDs, v)
			if err := m.CommandIDs[len(m.CommandIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SigHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BatchedCommandsStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_axelarnetwork_axelar_core_x_multisig_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBatchedCommandsID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevBatchedCommandsID = append(m.PrevBatchedCommandsID[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevBatchedCommandsID == nil {
				m.PrevBatchedCommandsID = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &types.Any{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params[:0], dAtA[iNdEx:postIndex]...)
			if m.Params == nil {
				m.Params = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_axelarnetwork_axelar_core_x_multisig_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CommandType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
