// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/btc/v1beta1/vote.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_scalarorg_scalar_core_x_nexus_exported "github.com/scalarorg/scalar-core/x/nexus/exported"
	github_com_scalarorg_scalar_core_x_vote_exported "github.com/scalarorg/scalar-core/x/vote/exported"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Vote handler
type NoEventsConfirmed struct {
	TxID   Hash                                                        `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3,customtype=Hash" json:"tx_id"`
	Chain  github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,2,opt,name=chain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"chain,omitempty"`
	PollID github_com_scalarorg_scalar_core_x_vote_exported.PollID     `protobuf:"varint,3,opt,name=poll_id,json=pollId,proto3,customtype=github.com/scalarorg/scalar-core/x/vote/exported.PollID" json:"poll_id"`
}

func (m *NoEventsConfirmed) Reset()         { *m = NoEventsConfirmed{} }
func (m *NoEventsConfirmed) String() string { return proto.CompactTextString(m) }
func (*NoEventsConfirmed) ProtoMessage()    {}
func (*NoEventsConfirmed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5aa85d5845ebca48, []int{0}
}
func (m *NoEventsConfirmed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoEventsConfirmed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoEventsConfirmed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoEventsConfirmed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoEventsConfirmed.Merge(m, src)
}
func (m *NoEventsConfirmed) XXX_Size() int {
	return m.Size()
}
func (m *NoEventsConfirmed) XXX_DiscardUnknown() {
	xxx_messageInfo_NoEventsConfirmed.DiscardUnknown(m)
}

var xxx_messageInfo_NoEventsConfirmed proto.InternalMessageInfo

type BTCEventConfirmed struct {
	Chain   github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,1,opt,name=chain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"chain,omitempty"`
	EventID EventID                                                     `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3,casttype=EventID" json:"event_id,omitempty"`
	Type    string                                                      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *BTCEventConfirmed) Reset()         { *m = BTCEventConfirmed{} }
func (m *BTCEventConfirmed) String() string { return proto.CompactTextString(m) }
func (*BTCEventConfirmed) ProtoMessage()    {}
func (*BTCEventConfirmed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5aa85d5845ebca48, []int{1}
}
func (m *BTCEventConfirmed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCEventConfirmed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCEventConfirmed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCEventConfirmed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCEventConfirmed.Merge(m, src)
}
func (m *BTCEventConfirmed) XXX_Size() int {
	return m.Size()
}
func (m *BTCEventConfirmed) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCEventConfirmed.DiscardUnknown(m)
}

var xxx_messageInfo_BTCEventConfirmed proto.InternalMessageInfo

func init() {
	proto.RegisterType((*NoEventsConfirmed)(nil), "scalar.btc.v1beta1.NoEventsConfirmed")
	proto.RegisterType((*BTCEventConfirmed)(nil), "scalar.btc.v1beta1.BTCEventConfirmed")
}

func init() { proto.RegisterFile("scalar/btc/v1beta1/vote.proto", fileDescriptor_5aa85d5845ebca48) }

var fileDescriptor_5aa85d5845ebca48 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xbf, 0x6a, 0xeb, 0x30,
	0x18, 0xc5, 0xad, 0x7b, 0x9d, 0xe4, 0x46, 0xdc, 0x25, 0x26, 0x5c, 0x42, 0xe0, 0xca, 0x21, 0x53,
	0x0a, 0xad, 0x45, 0xe8, 0xd0, 0xa1, 0x43, 0xc1, 0x49, 0xa1, 0xea, 0x10, 0x8a, 0x49, 0x97, 0x2e,
	0xc5, 0x7f, 0x54, 0xc7, 0xe0, 0x58, 0xc6, 0x56, 0x82, 0xfb, 0x16, 0x7d, 0x95, 0xbe, 0x45, 0xc6,
	0x8c, 0xa5, 0x83, 0x69, 0x9d, 0xa7, 0x68, 0xa6, 0x22, 0x29, 0x34, 0x4b, 0x87, 0x0c, 0xdd, 0x0e,
	0x1c, 0xf1, 0xfb, 0xbe, 0xf3, 0xe9, 0xc0, 0xff, 0xb9, 0xef, 0xc6, 0x6e, 0x86, 0x3d, 0xee, 0xe3,
	0xe5, 0xd0, 0xa3, 0xdc, 0x1d, 0xe2, 0x25, 0xe3, 0xd4, 0x4a, 0x33, 0xc6, 0x99, 0x61, 0x28, 0xdb,
	0xf2, 0xb8, 0x6f, 0xed, 0xec, 0x6e, 0x3b, 0x64, 0x21, 0x93, 0x36, 0x16, 0x4a, 0xbd, 0xec, 0xa2,
	0x6f, 0x40, 0xfc, 0x31, 0xa5, 0xb9, 0xf2, 0xfb, 0x1f, 0x00, 0xb6, 0x26, 0xec, 0x72, 0x49, 0x13,
	0x9e, 0x8f, 0x58, 0xf2, 0x10, 0x65, 0x73, 0x1a, 0x18, 0x47, 0xb0, 0xc6, 0x8b, 0xfb, 0x28, 0xe8,
	0x80, 0x1e, 0x18, 0xfc, 0xb5, 0xdb, 0xab, 0xd2, 0xd4, 0x5e, 0x4b, 0x53, 0xbf, 0x72, 0xf3, 0x59,
	0x55, 0x9a, 0xfa, 0xb4, 0x20, 0x63, 0x47, 0xe7, 0x05, 0x09, 0x8c, 0x5b, 0x58, 0xf3, 0x67, 0x6e,
	0x94, 0x74, 0x7e, 0xf5, 0xc0, 0xa0, 0x69, 0x5f, 0x6c, 0x4b, 0xf3, 0x3c, 0x8c, 0xf8, 0x6c, 0xe1,
	0x59, 0x3e, 0x9b, 0x63, 0x35, 0x9e, 0x65, 0xe1, 0x4e, 0x9d, 0xf8, 0x2c, 0xa3, 0xb8, 0xc0, 0x09,
	0x2d, 0x16, 0x39, 0xa6, 0x45, 0xca, 0x32, 0x4e, 0x03, 0x6b, 0x24, 0x10, 0x13, 0x77, 0x4e, 0x1d,
	0x45, 0x33, 0x3c, 0xd8, 0x48, 0x59, 0x1c, 0x8b, 0x1d, 0x7e, 0xf7, 0xc0, 0x40, 0xb7, 0xc9, 0x6e,
	0x87, 0xb3, 0x03, 0xe0, 0xe2, 0x52, 0x7b, 0xf6, 0x0d, 0x8b, 0x63, 0x32, 0xae, 0x4a, 0xb3, 0xae,
	0x94, 0x53, 0x17, 0x64, 0x12, 0xf4, 0x9f, 0x01, 0x6c, 0xd9, 0xd3, 0x91, 0x0c, 0xbf, 0xcf, 0xfe,
	0x15, 0x08, 0xfc, 0x68, 0xa0, 0x21, 0xfc, 0x43, 0xc5, 0x20, 0x91, 0x48, 0x9d, 0xea, 0x5f, 0x55,
	0x9a, 0x0d, 0x39, 0x9c, 0x8c, 0xb7, 0x7b, 0xe9, 0x34, 0xe4, 0x3b, 0x12, 0x18, 0x06, 0xd4, 0xc5,
	0x57, 0xc9, 0x03, 0x34, 0x1d, 0xa9, 0xed, 0xeb, 0xd5, 0x3b, 0xd2, 0x56, 0x15, 0x02, 0xeb, 0x0a,
	0x81, 0xb7, 0x0a, 0x81, 0xa7, 0x0d, 0xd2, 0xd6, 0x1b, 0xa4, 0xbd, 0x6c, 0x90, 0x76, 0x77, 0x7c,
	0xc0, 0xa2, 0xa2, 0x09, 0xb2, 0x01, 0x5e, 0x5d, 0x56, 0xe0, 0xf4, 0x33, 0x00, 0x00, 0xff, 0xff,
	0xcc, 0x68, 0x3a, 0xbb, 0x6d, 0x02, 0x00, 0x00,
}

func (m *NoEventsConfirmed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoEventsConfirmed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoEventsConfirmed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PollID != 0 {
		i = encodeVarintVote(dAtA, i, uint64(m.PollID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintVote(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.TxID.Size()
		i -= size
		if _, err := m.TxID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVote(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BTCEventConfirmed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCEventConfirmed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCEventConfirmed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintVote(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EventID) > 0 {
		i -= len(m.EventID)
		copy(dAtA[i:], m.EventID)
		i = encodeVarintVote(dAtA, i, uint64(len(m.EventID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintVote(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVote(dAtA []byte, offset int, v uint64) int {
	offset -= sovVote(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NoEventsConfirmed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TxID.Size()
	n += 1 + l + sovVote(uint64(l))
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	if m.PollID != 0 {
		n += 1 + sovVote(uint64(m.PollID))
	}
	return n
}

func (m *BTCEventConfirmed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	l = len(m.EventID)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	return n
}

func sovVote(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVote(x uint64) (n int) {
	return sovVote(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NoEventsConfirmed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoEventsConfirmed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoEventsConfirmed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollID", wireType)
			}
			m.PollID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollID |= github_com_scalarorg_scalar_core_x_vote_exported.PollID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCEventConfirmed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCEventConfirmed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCEventConfirmed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventID = EventID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVote(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVote
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVote
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVote
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVote
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVote        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVote          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVote = fmt.Errorf("proto: unexpected end of group")
)
