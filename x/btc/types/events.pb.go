// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/btc/v1beta1/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_scalarorg_bitcoin_vault_go_utils_chain "github.com/scalarorg/bitcoin-vault/go-utils/chain"
	github_com_scalarorg_scalar_core_x_evm_types "github.com/scalarorg/scalar-core/x/evm/types"
	github_com_scalarorg_scalar_core_x_nexus_exported "github.com/scalarorg/scalar-core/x/nexus/exported"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Event_Status int32

const (
	EventNonExistent Event_Status = 0
	EventConfirmed   Event_Status = 1
	EventCompleted   Event_Status = 2
	EventFailed      Event_Status = 3
)

var Event_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_CONFIRMED",
	2: "STATUS_COMPLETED",
	3: "STATUS_FAILED",
}

var Event_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_CONFIRMED":   1,
	"STATUS_COMPLETED":   2,
	"STATUS_FAILED":      3,
}

func (x Event_Status) String() string {
	return proto.EnumName(Event_Status_name, int32(x))
}

func (Event_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_352080992c371856, []int{1, 0}
}

type VoteEvents struct {
	Chain  github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,1,opt,name=chain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"chain,omitempty"`
	Events []Event                                                     `protobuf:"bytes,2,rep,name=events,proto3" json:"events"`
}

func (m *VoteEvents) Reset()         { *m = VoteEvents{} }
func (m *VoteEvents) String() string { return proto.CompactTextString(m) }
func (*VoteEvents) ProtoMessage()    {}
func (*VoteEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_352080992c371856, []int{0}
}
func (m *VoteEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteEvents.Merge(m, src)
}
func (m *VoteEvents) XXX_Size() int {
	return m.Size()
}
func (m *VoteEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteEvents.DiscardUnknown(m)
}

var xxx_messageInfo_VoteEvents proto.InternalMessageInfo

type Event struct {
	Chain  github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,1,opt,name=chain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"chain,omitempty"`
	TxID   Hash                                                        `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3,customtype=Hash" json:"tx_id"`
	Status Event_Status                                                `protobuf:"varint,3,opt,name=status,proto3,enum=scalar.btc.v1beta1.Event_Status" json:"status,omitempty"`
	Index  uint64                                                      `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*Event_StakingTx
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_352080992c371856, []int{1}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Event interface {
	isEvent_Event()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_StakingTx struct {
	StakingTx *EventStakingTx `protobuf:"bytes,5,opt,name=staking_tx,json=stakingTx,proto3,oneof" json:"staking_tx,omitempty"`
}

func (*Event_StakingTx) isEvent_Event() {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetStakingTx() *EventStakingTx {
	if x, ok := m.GetEvent().(*Event_StakingTx); ok {
		return x.StakingTx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_StakingTx)(nil),
	}
}

type EventStakingTx struct {
	Sender      string                           `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Amount      uint64                           `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Asset       string                           `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	PayloadHash Hash                             `protobuf:"bytes,4,opt,name=payload_hash,json=payloadHash,proto3,customtype=Hash" json:"payload_hash"`
	Metadata    EventStakingTx_StakingTxMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata"`
}

func (m *EventStakingTx) Reset()         { *m = EventStakingTx{} }
func (m *EventStakingTx) String() string { return proto.CompactTextString(m) }
func (*EventStakingTx) ProtoMessage()    {}
func (*EventStakingTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_352080992c371856, []int{2}
}
func (m *EventStakingTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStakingTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStakingTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStakingTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStakingTx.Merge(m, src)
}
func (m *EventStakingTx) XXX_Size() int {
	return m.Size()
}
func (m *EventStakingTx) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStakingTx.DiscardUnknown(m)
}

var xxx_messageInfo_EventStakingTx proto.InternalMessageInfo

type EventStakingTx_StakingTxMetadata struct {
	Tag                         VaultTag                                                    `protobuf:"bytes,1,opt,name=tag,proto3,customtype=VaultTag" json:"tag"`
	Version                     VaultVersion                                                `protobuf:"bytes,2,opt,name=version,proto3,customtype=VaultVersion" json:"version"`
	NetworkId                   NetworkKind                                                 `protobuf:"varint,3,opt,name=network_id,json=networkId,proto3,enum=scalar.btc.v1beta1.NetworkKind" json:"network_id,omitempty"`
	Flags                       uint8                                                       `protobuf:"varint,4,opt,name=flags,proto3,casttype=uint8" json:"flags,omitempty"`
	ServiceTag                  []byte                                                      `protobuf:"bytes,5,opt,name=service_tag,json=serviceTag,proto3" json:"service_tag,omitempty"`
	HaveOnlyCovenants           bool                                                        `protobuf:"varint,6,opt,name=have_only_covenants,json=haveOnlyCovenants,proto3" json:"have_only_covenants,omitempty"`
	CovenantQuorum              uint8                                                       `protobuf:"varint,7,opt,name=covenant_quorum,json=covenantQuorum,proto3,casttype=uint8" json:"covenant_quorum,omitempty"`
	DestinationChainType        github_com_scalarorg_bitcoin_vault_go_utils_chain.ChainType `protobuf:"varint,8,opt,name=destination_chain_type,json=destinationChainType,proto3,casttype=github.com/scalarorg/bitcoin-vault/go-utils/chain.ChainType" json:"destination_chain_type,omitempty"`
	DestinationChainId          uint64                                                      `protobuf:"varint,9,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	DestinationContractAddress  github_com_scalarorg_scalar_core_x_evm_types.Address        `protobuf:"bytes,10,opt,name=destination_contract_address,json=destinationContractAddress,proto3,customtype=github.com/scalarorg/scalar-core/x/evm/types.Address" json:"destination_contract_address"`
	DestinationRecipientAddress github_com_scalarorg_scalar_core_x_evm_types.Address        `protobuf:"bytes,11,opt,name=destination_recipient_address,json=destinationRecipientAddress,proto3,customtype=github.com/scalarorg/scalar-core/x/evm/types.Address" json:"destination_recipient_address"`
}

func (m *EventStakingTx_StakingTxMetadata) Reset()         { *m = EventStakingTx_StakingTxMetadata{} }
func (m *EventStakingTx_StakingTxMetadata) String() string { return proto.CompactTextString(m) }
func (*EventStakingTx_StakingTxMetadata) ProtoMessage()    {}
func (*EventStakingTx_StakingTxMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_352080992c371856, []int{2, 0}
}
func (m *EventStakingTx_StakingTxMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStakingTx_StakingTxMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStakingTx_StakingTxMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStakingTx_StakingTxMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStakingTx_StakingTxMetadata.Merge(m, src)
}
func (m *EventStakingTx_StakingTxMetadata) XXX_Size() int {
	return m.Size()
}
func (m *EventStakingTx_StakingTxMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStakingTx_StakingTxMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_EventStakingTx_StakingTxMetadata proto.InternalMessageInfo

type BTCEventCompleted struct {
	Chain   github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,1,opt,name=chain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"chain,omitempty"`
	EventID EventID                                                     `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3,casttype=EventID" json:"event_id,omitempty"`
	Type    string                                                      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *BTCEventCompleted) Reset()         { *m = BTCEventCompleted{} }
func (m *BTCEventCompleted) String() string { return proto.CompactTextString(m) }
func (*BTCEventCompleted) ProtoMessage()    {}
func (*BTCEventCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_352080992c371856, []int{3}
}
func (m *BTCEventCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCEventCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCEventCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCEventCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCEventCompleted.Merge(m, src)
}
func (m *BTCEventCompleted) XXX_Size() int {
	return m.Size()
}
func (m *BTCEventCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCEventCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_BTCEventCompleted proto.InternalMessageInfo

type BTCEventFailed struct {
	Chain   github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,1,opt,name=chain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"chain,omitempty"`
	EventID EventID                                                     `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3,casttype=EventID" json:"event_id,omitempty"`
	Type    string                                                      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *BTCEventFailed) Reset()         { *m = BTCEventFailed{} }
func (m *BTCEventFailed) String() string { return proto.CompactTextString(m) }
func (*BTCEventFailed) ProtoMessage()    {}
func (*BTCEventFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_352080992c371856, []int{4}
}
func (m *BTCEventFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCEventFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCEventFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCEventFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCEventFailed.Merge(m, src)
}
func (m *BTCEventFailed) XXX_Size() int {
	return m.Size()
}
func (m *BTCEventFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCEventFailed.DiscardUnknown(m)
}

var xxx_messageInfo_BTCEventFailed proto.InternalMessageInfo

type BTCEventRetryFailed struct {
	Chain   github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,1,opt,name=chain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"chain,omitempty"`
	EventID EventID                                                     `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3,casttype=EventID" json:"event_id,omitempty"`
	Type    string                                                      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *BTCEventRetryFailed) Reset()         { *m = BTCEventRetryFailed{} }
func (m *BTCEventRetryFailed) String() string { return proto.CompactTextString(m) }
func (*BTCEventRetryFailed) ProtoMessage()    {}
func (*BTCEventRetryFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_352080992c371856, []int{5}
}
func (m *BTCEventRetryFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCEventRetryFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCEventRetryFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCEventRetryFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCEventRetryFailed.Merge(m, src)
}
func (m *BTCEventRetryFailed) XXX_Size() int {
	return m.Size()
}
func (m *BTCEventRetryFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCEventRetryFailed.DiscardUnknown(m)
}

var xxx_messageInfo_BTCEventRetryFailed proto.InternalMessageInfo

type BridgeCallApproved struct {
	Chain            github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,1,opt,name=chain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"chain,omitempty"`
	EventID          EventID                                                     `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3,casttype=EventID" json:"event_id,omitempty"`
	CommandID        CommandID                                                   `protobuf:"bytes,3,opt,name=command_id,json=commandId,proto3,customtype=CommandID" json:"command_id"`
	Sender           string                                                      `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	DestinationChain github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,5,opt,name=destination_chain,json=destinationChain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"destination_chain,omitempty"`
	ContractAddress  string                                                      `protobuf:"bytes,6,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	PayloadHash      Hash                                                        `protobuf:"bytes,7,opt,name=payload_hash,json=payloadHash,proto3,customtype=Hash" json:"payload_hash"`
}

func (m *BridgeCallApproved) Reset()         { *m = BridgeCallApproved{} }
func (m *BridgeCallApproved) String() string { return proto.CompactTextString(m) }
func (*BridgeCallApproved) ProtoMessage()    {}
func (*BridgeCallApproved) Descriptor() ([]byte, []int) {
	return fileDescriptor_352080992c371856, []int{6}
}
func (m *BridgeCallApproved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeCallApproved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeCallApproved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeCallApproved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeCallApproved.Merge(m, src)
}
func (m *BridgeCallApproved) XXX_Size() int {
	return m.Size()
}
func (m *BridgeCallApproved) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeCallApproved.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeCallApproved proto.InternalMessageInfo

type BridgeCallFailed struct {
	Chain     github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,1,opt,name=chain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"chain,omitempty"`
	MessageID string                                                      `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *BridgeCallFailed) Reset()         { *m = BridgeCallFailed{} }
func (m *BridgeCallFailed) String() string { return proto.CompactTextString(m) }
func (*BridgeCallFailed) ProtoMessage()    {}
func (*BridgeCallFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_352080992c371856, []int{7}
}
func (m *BridgeCallFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeCallFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeCallFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeCallFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeCallFailed.Merge(m, src)
}
func (m *BridgeCallFailed) XXX_Size() int {
	return m.Size()
}
func (m *BridgeCallFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeCallFailed.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeCallFailed proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("scalar.btc.v1beta1.Event_Status", Event_Status_name, Event_Status_value)
	proto.RegisterType((*VoteEvents)(nil), "scalar.btc.v1beta1.VoteEvents")
	proto.RegisterType((*Event)(nil), "scalar.btc.v1beta1.Event")
	proto.RegisterType((*EventStakingTx)(nil), "scalar.btc.v1beta1.EventStakingTx")
	proto.RegisterType((*EventStakingTx_StakingTxMetadata)(nil), "scalar.btc.v1beta1.EventStakingTx.StakingTxMetadata")
	proto.RegisterType((*BTCEventCompleted)(nil), "scalar.btc.v1beta1.BTCEventCompleted")
	proto.RegisterType((*BTCEventFailed)(nil), "scalar.btc.v1beta1.BTCEventFailed")
	proto.RegisterType((*BTCEventRetryFailed)(nil), "scalar.btc.v1beta1.BTCEventRetryFailed")
	proto.RegisterType((*BridgeCallApproved)(nil), "scalar.btc.v1beta1.BridgeCallApproved")
	proto.RegisterType((*BridgeCallFailed)(nil), "scalar.btc.v1beta1.BridgeCallFailed")
}

func init() { proto.RegisterFile("scalar/btc/v1beta1/events.proto", fileDescriptor_352080992c371856) }

var fileDescriptor_352080992c371856 = []byte{
	// 1114 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xbf, 0x6f, 0x23, 0x45,
	0x14, 0xf6, 0xc6, 0xbf, 0x9f, 0x9d, 0xc4, 0x99, 0xb3, 0x22, 0x63, 0xc0, 0xb6, 0x5c, 0xf9, 0xa4,
	0xc4, 0x26, 0xe1, 0x24, 0x4e, 0xe2, 0x97, 0xb2, 0xb6, 0xa3, 0x5b, 0xb8, 0xe4, 0x8e, 0x89, 0x93,
	0x82, 0xc6, 0x1a, 0xef, 0xce, 0xd9, 0xab, 0xdb, 0xdd, 0x31, 0xbb, 0x63, 0x63, 0x37, 0x88, 0x12,
	0xa5, 0xa2, 0xa3, 0x21, 0x15, 0x14, 0x54, 0x48, 0x88, 0x86, 0x8e, 0x36, 0xe5, 0x95, 0x08, 0x24,
	0x0b, 0x9c, 0xbf, 0x82, 0x54, 0x68, 0x67, 0xc7, 0x89, 0xe3, 0x5c, 0x74, 0x57, 0x5c, 0xa4, 0xa3,
	0x9b, 0x37, 0xef, 0x9b, 0xf7, 0xbe, 0x79, 0xef, 0xed, 0x37, 0x0b, 0x45, 0x4f, 0x27, 0x16, 0x71,
	0x6b, 0x1d, 0xae, 0xd7, 0x86, 0x5b, 0x1d, 0xca, 0xc9, 0x56, 0x8d, 0x0e, 0xa9, 0xc3, 0xbd, 0x6a,
	0xdf, 0x65, 0x9c, 0x21, 0x14, 0x00, 0xaa, 0x1d, 0xae, 0x57, 0x25, 0x20, 0x9f, 0xed, 0xb2, 0x2e,
	0x13, 0xee, 0x9a, 0xbf, 0x0a, 0x90, 0xf9, 0xc2, 0x73, 0x42, 0xf1, 0x71, 0x9f, 0xca, 0x48, 0xe5,
	0xef, 0x15, 0x80, 0x23, 0xc6, 0x69, 0x53, 0x84, 0x47, 0x87, 0x10, 0xd5, 0x7b, 0xc4, 0x74, 0x72,
	0x4a, 0x49, 0xa9, 0x24, 0xd5, 0x8f, 0xcf, 0x27, 0xc5, 0xf7, 0xbb, 0x26, 0xef, 0x0d, 0x3a, 0x55,
	0x9d, 0xd9, 0xb5, 0x20, 0x18, 0x73, 0xbb, 0x72, 0xb5, 0xa9, 0x33, 0x97, 0xd6, 0x46, 0x35, 0x87,
	0x8e, 0x06, 0x5e, 0x8d, 0x8e, 0xfa, 0xcc, 0xe5, 0xd4, 0xa8, 0xd6, 0xfd, 0x10, 0xfb, 0xc4, 0xa6,
	0x38, 0x88, 0x86, 0xde, 0x83, 0x58, 0xc0, 0x3f, 0xb7, 0x54, 0x0a, 0x57, 0x52, 0xdb, 0x6f, 0x54,
	0xaf, 0x5f, 0xa0, 0x2a, 0x28, 0xa8, 0x91, 0xd3, 0x49, 0x31, 0x84, 0x25, 0xbc, 0x3c, 0x0d, 0x43,
	0x54, 0xec, 0xdf, 0x16, 0xb3, 0xbb, 0x10, 0xe5, 0xa3, 0xb6, 0x69, 0xe4, 0x96, 0x4a, 0x4a, 0x25,
	0xad, 0x66, 0xfd, 0xec, 0x7f, 0x4e, 0x8a, 0x91, 0x07, 0xc4, 0xeb, 0x4d, 0x27, 0xc5, 0x48, 0x6b,
	0xa4, 0x35, 0x70, 0x84, 0x8f, 0x34, 0x03, 0xdd, 0x87, 0x98, 0xc7, 0x09, 0x1f, 0x78, 0xb9, 0x70,
	0x49, 0xa9, 0xac, 0x6c, 0x97, 0x6e, 0xbc, 0x44, 0xf5, 0x40, 0xe0, 0xb0, 0xc4, 0xa3, 0x2c, 0x44,
	0x4d, 0xc7, 0xa0, 0xa3, 0x5c, 0xa4, 0xa4, 0x54, 0x22, 0x38, 0x30, 0x50, 0x1d, 0xc0, 0xe3, 0xe4,
	0xa9, 0xe9, 0x74, 0xdb, 0x7c, 0x94, 0x8b, 0x96, 0x94, 0x4a, 0x6a, 0xbb, 0x7c, 0x63, 0xcc, 0x83,
	0x00, 0xda, 0x1a, 0x3d, 0x08, 0xe1, 0xa4, 0x37, 0x33, 0xca, 0xbf, 0x29, 0x10, 0x0b, 0xb2, 0xa1,
	0x0d, 0x40, 0x07, 0xad, 0x9d, 0xd6, 0xe1, 0x41, 0xfb, 0x70, 0xff, 0xe0, 0x71, 0xb3, 0xae, 0xed,
	0x6a, 0xcd, 0x46, 0x26, 0x94, 0xcf, 0x1e, 0x9f, 0x94, 0x32, 0x22, 0xc6, 0x3e, 0x73, 0x9a, 0x23,
	0xd3, 0xe3, 0x7e, 0x3d, 0x2b, 0x90, 0x91, 0xe8, 0xfa, 0xa3, 0xfd, 0x5d, 0x0d, 0xef, 0x35, 0x1b,
	0x19, 0x25, 0x8f, 0x8e, 0x4f, 0x4a, 0x2b, 0x02, 0x5b, 0x67, 0xce, 0x13, 0xd3, 0xb5, 0xa9, 0x71,
	0x05, 0xb9, 0xf7, 0xf8, 0x61, 0xb3, 0xd5, 0x6c, 0x64, 0x96, 0xae, 0x20, 0xed, 0xbe, 0x45, 0x39,
	0x35, 0x50, 0x19, 0x96, 0x25, 0x72, 0x77, 0x47, 0x7b, 0xd8, 0x6c, 0x64, 0xc2, 0xf9, 0xd5, 0xe3,
	0x93, 0x52, 0x4a, 0xc0, 0x76, 0x89, 0x69, 0x51, 0x23, 0x9f, 0xf8, 0xe6, 0x87, 0x42, 0xe8, 0xa7,
	0x1f, 0x0b, 0x8a, 0x1a, 0x87, 0xa8, 0xe8, 0x72, 0xf9, 0xaf, 0x38, 0xac, 0x5c, 0xbd, 0x23, 0x5a,
	0x87, 0x98, 0x47, 0x1d, 0x83, 0xba, 0x41, 0xbb, 0xb1, 0xb4, 0xfc, 0x7d, 0x62, 0xb3, 0x81, 0xc3,
	0x45, 0xbf, 0x22, 0x58, 0x5a, 0x7e, 0x85, 0x89, 0xe7, 0x51, 0x2e, 0x5a, 0x93, 0xc4, 0x81, 0x81,
	0x6a, 0x90, 0xee, 0x93, 0xb1, 0xc5, 0x88, 0xd1, 0xee, 0x11, 0xaf, 0x27, 0xca, 0x9f, 0x56, 0xd3,
	0xf3, 0x3d, 0xc6, 0x29, 0x89, 0xf0, 0x0d, 0x74, 0x04, 0x09, 0x9b, 0x72, 0x62, 0x10, 0x4e, 0x64,
	0x43, 0xee, 0xbd, 0xb8, 0x21, 0xd5, 0x8b, 0xd5, 0x9e, 0x3c, 0x2b, 0x87, 0xf8, 0x22, 0x56, 0xfe,
	0xdf, 0x28, 0xac, 0x5d, 0x43, 0xa1, 0x32, 0x84, 0x39, 0xe9, 0x8a, 0x1b, 0xa6, 0xd5, 0x8c, 0x64,
	0x95, 0x38, 0x22, 0x03, 0x8b, 0xb7, 0x48, 0x17, 0xfb, 0x4e, 0x54, 0x85, 0xf8, 0x90, 0xba, 0x9e,
	0xc9, 0x9c, 0x85, 0x09, 0x4d, 0x0b, 0xdc, 0x51, 0xe0, 0xc3, 0x33, 0x10, 0xfa, 0x08, 0xc0, 0xa1,
	0xfc, 0x4b, 0xe6, 0x3e, 0xf5, 0x87, 0x3a, 0x18, 0xd4, 0xe2, 0xf3, 0xee, 0xb0, 0x1f, 0xa0, 0x3e,
	0x35, 0x1d, 0x03, 0x27, 0xe5, 0x11, 0xcd, 0x40, 0x45, 0x88, 0x3e, 0xb1, 0x48, 0xd7, 0x13, 0xb5,
	0x5a, 0x56, 0x93, 0xe7, 0x93, 0x62, 0x74, 0x60, 0x3a, 0xfc, 0x3e, 0x0e, 0xf6, 0x51, 0x11, 0x52,
	0x1e, 0x75, 0x87, 0xa6, 0x4e, 0xdb, 0x3e, 0x79, 0xbf, 0x4a, 0x69, 0x0c, 0x72, 0xab, 0x25, 0x18,
	0xdf, 0xe9, 0x91, 0x21, 0x6d, 0x33, 0xc7, 0x1a, 0xb7, 0x75, 0x36, 0xa4, 0x0e, 0xf1, 0x3f, 0xfc,
	0x58, 0x49, 0xa9, 0x24, 0xf0, 0x9a, 0xef, 0x7a, 0xe4, 0x58, 0xe3, 0xfa, 0xcc, 0x81, 0xb6, 0x61,
	0x75, 0x86, 0x6a, 0x7f, 0x31, 0x60, 0xee, 0xc0, 0xce, 0xc5, 0x17, 0x73, 0xaf, 0xcc, 0x10, 0x9f,
	0x09, 0x00, 0x1a, 0xc0, 0xba, 0x41, 0x3d, 0x6e, 0x3a, 0x84, 0x9b, 0xcc, 0x69, 0x8b, 0x4f, 0xb9,
	0xed, 0xcb, 0x5a, 0x2e, 0x21, 0x8e, 0xde, 0xac, 0x0e, 0x1d, 0x93, 0xeb, 0xcc, 0x74, 0x36, 0x87,
	0x7e, 0xf5, 0x6a, 0x5d, 0xb6, 0x39, 0xe0, 0xa6, 0xe5, 0xd5, 0x44, 0x84, 0x40, 0x1d, 0x5a, 0xe3,
	0x3e, 0xc5, 0xd9, 0xb9, 0xf0, 0x17, 0xbb, 0xe8, 0x1d, 0xc8, 0x5e, 0x4f, 0x6b, 0x1a, 0xb9, 0xa4,
	0x98, 0x45, 0xb4, 0x78, 0x46, 0x33, 0xd0, 0x57, 0xf0, 0xd6, 0x95, 0x13, 0xcc, 0xe1, 0x2e, 0xd1,
	0x79, 0x9b, 0x18, 0x86, 0x4b, 0x3d, 0x2f, 0x07, 0xa2, 0xa7, 0x1f, 0xc8, 0x9e, 0xde, 0x7b, 0x09,
	0x41, 0xa3, 0x43, 0x5b, 0x0a, 0xf8, 0x4e, 0x10, 0x03, 0xe7, 0xe7, 0xf3, 0xca, 0x04, 0xd2, 0x87,
	0xbe, 0x56, 0xe0, 0xed, 0x79, 0x02, 0x2e, 0xd5, 0xcd, 0xbe, 0x49, 0x9d, 0x4b, 0x06, 0xa9, 0x57,
	0xc0, 0xe0, 0xcd, 0xb9, 0x14, 0x78, 0x96, 0x41, 0x3a, 0xcb, 0xbf, 0x28, 0xb0, 0xa6, 0xb6, 0xea,
	0x0b, 0x52, 0x71, 0x4b, 0x72, 0xbe, 0x05, 0x09, 0xa1, 0x29, 0x33, 0x45, 0x4f, 0xaa, 0xeb, 0xd3,
	0x49, 0x31, 0x2e, 0x92, 0x6b, 0x8d, 0xf3, 0xcb, 0x25, 0x8e, 0x0b, 0x9c, 0x66, 0x20, 0x04, 0x11,
	0x31, 0x39, 0x81, 0x72, 0x88, 0x75, 0xf9, 0x67, 0x05, 0x56, 0x66, 0x9c, 0x03, 0xdd, 0x7a, 0xcd,
	0x09, 0xff, 0xaa, 0xc0, 0x9d, 0x19, 0x61, 0x4c, 0xb9, 0x3b, 0xfe, 0x5f, 0xb0, 0xfe, 0x3d, 0x0c,
	0x48, 0x75, 0x4d, 0xa3, 0x4b, 0xeb, 0xc4, 0xb2, 0x76, 0xfa, 0x7d, 0x97, 0x0d, 0x5f, 0x2b, 0xd2,
	0x1f, 0x02, 0xe8, 0xcc, 0xb6, 0x89, 0x63, 0xcc, 0xd4, 0x34, 0xad, 0x16, 0xe4, 0xa7, 0x92, 0xac,
	0x07, 0x1e, 0xad, 0x31, 0x9d, 0x37, 0x70, 0x52, 0x9e, 0xd0, 0x8c, 0xb9, 0x57, 0x2c, 0x72, 0xe5,
	0x15, 0xb3, 0x60, 0xed, 0x9a, 0x8e, 0x08, 0x25, 0x7d, 0x05, 0x97, 0xcd, 0x2c, 0xaa, 0x10, 0xba,
	0x0b, 0x99, 0x6b, 0xba, 0x13, 0x13, 0x7c, 0x56, 0xf5, 0x05, 0xb9, 0x58, 0x7c, 0x30, 0xe3, 0x2f,
	0x78, 0x30, 0xcb, 0xdf, 0x29, 0x90, 0xb9, 0xec, 0xe0, 0xed, 0x0e, 0xdd, 0x06, 0x80, 0x4d, 0x3d,
	0x8f, 0x74, 0xe9, 0x65, 0x07, 0x97, 0xfd, 0xda, 0xef, 0x05, 0xbb, 0x7e, 0xed, 0x25, 0x40, 0x33,
	0xd4, 0x4f, 0x4e, 0xff, 0x29, 0x84, 0x4e, 0xa7, 0x05, 0xe5, 0xd9, 0xb4, 0xa0, 0xfc, 0x3d, 0x2d,
	0x28, 0xdf, 0x9e, 0x15, 0x42, 0xcf, 0xce, 0x0a, 0xa1, 0x3f, 0xce, 0x0a, 0xa1, 0xcf, 0x37, 0x5e,
	0x82, 0x8f, 0xff, 0xcb, 0x2c, 0x74, 0xae, 0x13, 0x13, 0xff, 0xca, 0xef, 0xfe, 0x17, 0x00, 0x00,
	0xff, 0xff, 0xed, 0x17, 0x4a, 0x68, 0x98, 0x0b, 0x00, 0x00,
}

func (m *VoteEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Index != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.TxID.Size()
		i -= size
		if _, err := m.TxID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_StakingTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_StakingTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingTx != nil {
		{
			size, err := m.StakingTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *EventStakingTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStakingTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStakingTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.PayloadHash.Size()
		i -= size
		if _, err := m.PayloadHash.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventStakingTx_StakingTxMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStakingTx_StakingTxMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStakingTx_StakingTxMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DestinationRecipientAddress.Size()
		i -= size
		if _, err := m.DestinationRecipientAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.DestinationContractAddress.Size()
		i -= size
		if _, err := m.DestinationContractAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.DestinationChainId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationChainId))
		i--
		dAtA[i] = 0x48
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x40
	}
	if m.CovenantQuorum != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CovenantQuorum))
		i--
		dAtA[i] = 0x38
	}
	if m.HaveOnlyCovenants {
		i--
		if m.HaveOnlyCovenants {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.ServiceTag) > 0 {
		i -= len(m.ServiceTag)
		copy(dAtA[i:], m.ServiceTag)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ServiceTag)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Flags != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x20
	}
	if m.NetworkId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NetworkId))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Version.Size()
		i -= size
		if _, err := m.Version.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Tag.Size()
		i -= size
		if _, err := m.Tag.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BTCEventCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCEventCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCEventCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EventID) > 0 {
		i -= len(m.EventID)
		copy(dAtA[i:], m.EventID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EventID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCEventFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCEventFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCEventFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EventID) > 0 {
		i -= len(m.EventID)
		copy(dAtA[i:], m.EventID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EventID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCEventRetryFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCEventRetryFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCEventRetryFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EventID) > 0 {
		i -= len(m.EventID)
		copy(dAtA[i:], m.EventID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EventID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgeCallApproved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeCallApproved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeCallApproved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PayloadHash.Size()
		i -= size
		if _, err := m.PayloadHash.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DestinationChain) > 0 {
		i -= len(m.DestinationChain)
		copy(dAtA[i:], m.DestinationChain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationChain)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.CommandID.Size()
		i -= size
		if _, err := m.CommandID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.EventID) > 0 {
		i -= len(m.EventID)
		copy(dAtA[i:], m.EventID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EventID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgeCallFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeCallFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeCallFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageID) > 0 {
		i -= len(m.MessageID)
		copy(dAtA[i:], m.MessageID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MessageID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VoteEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.TxID.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.Status != 0 {
		n += 1 + sovEvents(uint64(m.Status))
	}
	if m.Index != 0 {
		n += 1 + sovEvents(uint64(m.Index))
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *Event_StakingTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingTx != nil {
		l = m.StakingTx.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventStakingTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvents(uint64(m.Amount))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.PayloadHash.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventStakingTx_StakingTxMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tag.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Version.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.NetworkId != 0 {
		n += 1 + sovEvents(uint64(m.NetworkId))
	}
	if m.Flags != 0 {
		n += 1 + sovEvents(uint64(m.Flags))
	}
	l = len(m.ServiceTag)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.HaveOnlyCovenants {
		n += 2
	}
	if m.CovenantQuorum != 0 {
		n += 1 + sovEvents(uint64(m.CovenantQuorum))
	}
	if m.DestinationChainType != 0 {
		n += 1 + sovEvents(uint64(m.DestinationChainType))
	}
	if m.DestinationChainId != 0 {
		n += 1 + sovEvents(uint64(m.DestinationChainId))
	}
	l = m.DestinationContractAddress.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.DestinationRecipientAddress.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *BTCEventCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EventID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *BTCEventFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EventID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *BTCEventRetryFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EventID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *BridgeCallApproved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EventID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.CommandID.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DestinationChain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.PayloadHash.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *BridgeCallFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MessageID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VoteEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Event_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventStakingTx{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_StakingTx{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStakingTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStakingTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStakingTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PayloadHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStakingTx_StakingTxMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingTxMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingTxMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkId", wireType)
			}
			m.NetworkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkId |= NetworkKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= uint8(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceTag", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceTag = append(m.ServiceTag[:0], dAtA[iNdEx:postIndex]...)
			if m.ServiceTag == nil {
				m.ServiceTag = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveOnlyCovenants", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveOnlyCovenants = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CovenantQuorum", wireType)
			}
			m.CovenantQuorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CovenantQuorum |= uint8(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= github_com_scalarorg_bitcoin_vault_go_utils_chain.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			m.DestinationChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationContractAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DestinationContractAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationRecipientAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DestinationRecipientAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCEventCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCEventCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCEventCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventID = EventID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCEventFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCEventFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCEventFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventID = EventID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCEventRetryFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCEventRetryFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCEventRetryFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventID = EventID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeCallApproved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeCallApproved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeCallApproved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventID = EventID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommandID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PayloadHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeCallFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeCallFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeCallFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
