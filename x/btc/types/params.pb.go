// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/btc/v1beta1/params.proto

package types

import (
	fmt "fmt"
	utils "github.com/axelarnetwork/axelar-core/utils"
	github_com_axelarnetwork_axelar_core_x_nexus_exported "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	ChainName           github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3,casttype=github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" json:"chain_name,omitempty"`
	ConfirmationHeight  uint64                                                          `protobuf:"varint,2,opt,name=confirmation_height,json=confirmationHeight,proto3" json:"confirmation_height,omitempty"`
	NetworkKind         NetworkKind                                                     `protobuf:"varint,3,opt,name=network_kind,json=networkKind,proto3,enum=scalar.btc.v1beta1.NetworkKind" json:"network_kind,omitempty"`
	RevoteLockingPeriod int64                                                           `protobuf:"varint,4,opt,name=revote_locking_period,json=revoteLockingPeriod,proto3" json:"revote_locking_period,omitempty"`
	ChainId             ChainId                                                         `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3,casttype=ChainId" json:"chain_id,omitempty"`
	VotingThreshold     utils.Threshold                                                 `protobuf:"bytes,6,opt,name=voting_threshold,json=votingThreshold,proto3" json:"voting_threshold"`
	MinVoterCount       int64                                                           `protobuf:"varint,7,opt,name=min_voter_count,json=minVoterCount,proto3" json:"min_voter_count,omitempty"`
	VotingGracePeriod   int64                                                           `protobuf:"varint,8,opt,name=voting_grace_period,json=votingGracePeriod,proto3" json:"voting_grace_period,omitempty"`
	EndBlockerLimit     int64                                                           `protobuf:"varint,9,opt,name=end_blocker_limit,json=endBlockerLimit,proto3" json:"end_blocker_limit,omitempty"`
	TransferLimit       uint64                                                          `protobuf:"varint,10,opt,name=transfer_limit,json=transferLimit,proto3" json:"transfer_limit,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_81a0a7bfd35a8ac2, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetChainName() github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *Params) GetConfirmationHeight() uint64 {
	if m != nil {
		return m.ConfirmationHeight
	}
	return 0
}

func (m *Params) GetNetworkKind() NetworkKind {
	if m != nil {
		return m.NetworkKind
	}
	return Mainnet
}

func (m *Params) GetRevoteLockingPeriod() int64 {
	if m != nil {
		return m.RevoteLockingPeriod
	}
	return 0
}

func (m *Params) GetChainId() ChainId {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *Params) GetVotingThreshold() utils.Threshold {
	if m != nil {
		return m.VotingThreshold
	}
	return utils.Threshold{}
}

func (m *Params) GetMinVoterCount() int64 {
	if m != nil {
		return m.MinVoterCount
	}
	return 0
}

func (m *Params) GetVotingGracePeriod() int64 {
	if m != nil {
		return m.VotingGracePeriod
	}
	return 0
}

func (m *Params) GetEndBlockerLimit() int64 {
	if m != nil {
		return m.EndBlockerLimit
	}
	return 0
}

func (m *Params) GetTransferLimit() uint64 {
	if m != nil {
		return m.TransferLimit
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "scalar.btc.v1beta1.Params")
}

func init() { proto.RegisterFile("scalar/btc/v1beta1/params.proto", fileDescriptor_81a0a7bfd35a8ac2) }

var fileDescriptor_81a0a7bfd35a8ac2 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xdd, 0x6a, 0xdb, 0x3c,
	0x18, 0xc7, 0xe3, 0xb7, 0x79, 0x93, 0x46, 0x59, 0x9b, 0x55, 0xd9, 0xc0, 0xe4, 0xc0, 0x0e, 0x63,
	0x2b, 0x61, 0x6c, 0x32, 0xcd, 0x2e, 0x60, 0xe0, 0xc0, 0x3e, 0x58, 0x29, 0xc1, 0x8c, 0x1d, 0xec,
	0xc4, 0xc8, 0xb2, 0x6a, 0x8b, 0xc4, 0x92, 0x91, 0x95, 0x2c, 0xbb, 0x8b, 0x5d, 0xcf, 0xae, 0xa0,
	0x87, 0x3d, 0xdc, 0x51, 0x18, 0xc9, 0x5d, 0xf4, 0x68, 0x48, 0xb2, 0xd3, 0xc2, 0x76, 0xf6, 0xf8,
	0xff, 0xff, 0xf9, 0xd1, 0xf3, 0x05, 0xfc, 0x8a, 0xe0, 0x25, 0x96, 0x41, 0xa2, 0x48, 0xb0, 0xbe,
	0x48, 0xa8, 0xc2, 0x17, 0x41, 0x89, 0x25, 0x2e, 0x2a, 0x54, 0x4a, 0xa1, 0x04, 0x84, 0x16, 0x40,
	0x89, 0x22, 0xa8, 0x06, 0x46, 0x4f, 0x32, 0x91, 0x09, 0x63, 0x07, 0x3a, 0xb2, 0xe4, 0xc8, 0xfb,
	0x47, 0x2a, 0xf5, 0xbd, 0xa4, 0x75, 0xa6, 0xd1, 0x73, 0xbc, 0xa1, 0xda, 0x5f, 0x29, 0xb6, 0xac,
	0xee, 0x89, 0x5c, 0xd2, 0x2a, 0x17, 0xcb, 0xd4, 0x52, 0xcf, 0x7e, 0xb6, 0x41, 0x67, 0x6e, 0x0a,
	0x80, 0x09, 0x00, 0x24, 0xc7, 0x8c, 0xc7, 0x1c, 0x17, 0xd4, 0x75, 0xc6, 0xce, 0xa4, 0x17, 0xce,
	0xee, 0xb6, 0xfe, 0xdb, 0x8c, 0xa9, 0x7c, 0x95, 0x20, 0x22, 0x8a, 0xc0, 0xe6, 0xe4, 0x54, 0x7d,
	0x13, 0x72, 0x51, 0x7f, 0xbd, 0x26, 0x42, 0xd2, 0x60, 0x13, 0x70, 0xba, 0x59, 0x55, 0x01, 0xdd,
	0x94, 0x42, 0x2a, 0x9a, 0xa2, 0x99, 0xce, 0x75, 0x85, 0x0b, 0x1a, 0xf5, 0x48, 0x13, 0xc2, 0x00,
	0x0c, 0x89, 0xe0, 0xd7, 0x4c, 0x16, 0x58, 0x31, 0xc1, 0xe3, 0x9c, 0xb2, 0x2c, 0x57, 0xee, 0x7f,
	0x63, 0x67, 0xd2, 0x8e, 0xe0, 0x43, 0xeb, 0x83, 0x71, 0x60, 0x08, 0x1e, 0xd5, 0xaf, 0xc5, 0x0b,
	0xc6, 0x53, 0xf7, 0x68, 0xec, 0x4c, 0x4e, 0xa7, 0x3e, 0xfa, 0x7b, 0x4c, 0xe8, 0xca, 0x72, 0x9f,
	0x18, 0x4f, 0xa3, 0x3e, 0xbf, 0xff, 0x80, 0x53, 0xf0, 0x54, 0xd2, 0xb5, 0x50, 0x34, 0x5e, 0x0a,
	0xb2, 0x60, 0x3c, 0x8b, 0x4b, 0x2a, 0x99, 0x48, 0xdd, 0xf6, 0xd8, 0x99, 0x1c, 0x45, 0x43, 0x6b,
	0x5e, 0x5a, 0x6f, 0x6e, 0x2c, 0x78, 0x0e, 0x8e, 0xed, 0x30, 0x58, 0xea, 0xfe, 0xaf, 0xab, 0x0b,
	0xfb, 0x77, 0x5b, 0xbf, 0x6b, 0x9a, 0xfa, 0x98, 0x46, 0x5d, 0x62, 0x03, 0x38, 0x07, 0x8f, 0xd7,
	0x42, 0xe9, 0x9c, 0x87, 0xc9, 0xba, 0x9d, 0xb1, 0x33, 0xe9, 0x4f, 0x7d, 0x64, 0xc7, 0x83, 0xcc,
	0x02, 0x0e, 0x55, 0x7e, 0x6e, 0xb0, 0xb0, 0x7d, 0xb3, 0xf5, 0x5b, 0xd1, 0xc0, 0xfe, 0x7e, 0x90,
	0xe1, 0x39, 0x18, 0x14, 0x8c, 0xc7, 0xba, 0x24, 0x19, 0x13, 0xb1, 0xe2, 0xca, 0xed, 0x9a, 0x3a,
	0x4f, 0x0a, 0xc6, 0xbf, 0x68, 0x75, 0xa6, 0x45, 0x88, 0xc0, 0xb0, 0x7e, 0x39, 0x93, 0x98, 0xd0,
	0xa6, 0xa7, 0x63, 0xc3, 0x9e, 0x59, 0xeb, 0xbd, 0x76, 0xea, 0x8e, 0x5e, 0x82, 0x33, 0xca, 0xd3,
	0x38, 0xd1, 0x33, 0xa0, 0x32, 0x5e, 0xb2, 0x82, 0x29, 0xb7, 0x67, 0xe8, 0x01, 0xe5, 0x69, 0x68,
	0xf5, 0x4b, 0x2d, 0xc3, 0x17, 0xe0, 0x54, 0x49, 0xcc, 0xab, 0xeb, 0x03, 0x08, 0xcc, 0x86, 0x4e,
	0x1a, 0xd5, 0x60, 0xe1, 0xbb, 0x9b, 0x9d, 0xe7, 0xdc, 0xee, 0x3c, 0xe7, 0xf7, 0xce, 0x73, 0x7e,
	0xec, 0xbd, 0xd6, 0xed, 0xde, 0x6b, 0xfd, 0xda, 0x7b, 0xad, 0xaf, 0xaf, 0x1e, 0xdc, 0x8c, 0x5d,
	0x95, 0x90, 0x59, 0x1d, 0x35, 0xf7, 0xa2, 0x0f, 0xd7, 0x1c, 0x6c, 0xd2, 0x31, 0xb7, 0xf8, 0xe6,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x51, 0xfa, 0x0b, 0x1e, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransferLimit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TransferLimit))
		i--
		dAtA[i] = 0x50
	}
	if m.EndBlockerLimit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.EndBlockerLimit))
		i--
		dAtA[i] = 0x48
	}
	if m.VotingGracePeriod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.VotingGracePeriod))
		i--
		dAtA[i] = 0x40
	}
	if m.MinVoterCount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinVoterCount))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.VotingThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.ChainId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x28
	}
	if m.RevoteLockingPeriod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.RevoteLockingPeriod))
		i--
		dAtA[i] = 0x20
	}
	if m.NetworkKind != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.NetworkKind))
		i--
		dAtA[i] = 0x18
	}
	if m.ConfirmationHeight != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ConfirmationHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.ConfirmationHeight != 0 {
		n += 1 + sovParams(uint64(m.ConfirmationHeight))
	}
	if m.NetworkKind != 0 {
		n += 1 + sovParams(uint64(m.NetworkKind))
	}
	if m.RevoteLockingPeriod != 0 {
		n += 1 + sovParams(uint64(m.RevoteLockingPeriod))
	}
	if m.ChainId != 0 {
		n += 1 + sovParams(uint64(m.ChainId))
	}
	l = m.VotingThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MinVoterCount != 0 {
		n += 1 + sovParams(uint64(m.MinVoterCount))
	}
	if m.VotingGracePeriod != 0 {
		n += 1 + sovParams(uint64(m.VotingGracePeriod))
	}
	if m.EndBlockerLimit != 0 {
		n += 1 + sovParams(uint64(m.EndBlockerLimit))
	}
	if m.TransferLimit != 0 {
		n += 1 + sovParams(uint64(m.TransferLimit))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationHeight", wireType)
			}
			m.ConfirmationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfirmationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkKind", wireType)
			}
			m.NetworkKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkKind |= NetworkKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevoteLockingPeriod", wireType)
			}
			m.RevoteLockingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevoteLockingPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= ChainId(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VotingThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVoterCount", wireType)
			}
			m.MinVoterCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVoterCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingGracePeriod", wireType)
			}
			m.VotingGracePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingGracePeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockerLimit", wireType)
			}
			m.EndBlockerLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockerLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferLimit", wireType)
			}
			m.TransferLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransferLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
