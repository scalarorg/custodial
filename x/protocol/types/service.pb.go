// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/protocol/v1beta1/service.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("scalar/protocol/v1beta1/service.proto", fileDescriptor_8e6380763574b912)
}

var fileDescriptor_8e6380763574b912 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xd3, 0xcf, 0x4a, 0xe3, 0x40,
	0x00, 0xc7, 0xf1, 0xce, 0xc2, 0x2e, 0xec, 0xb0, 0x2c, 0x6c, 0x58, 0x50, 0x82, 0x84, 0x12, 0x11,
	0xb4, 0xd8, 0x0c, 0x69, 0x2b, 0x42, 0x6f, 0xda, 0xa3, 0x08, 0x6a, 0xf1, 0xe2, 0xa5, 0x4c, 0x93,
	0x21, 0x0d, 0xd4, 0x4c, 0x3a, 0x33, 0x29, 0xed, 0x55, 0x7c, 0x00, 0x41, 0x7c, 0x05, 0x5f, 0xc0,
	0x07, 0xf0, 0xea, 0xb1, 0x20, 0x88, 0x47, 0x69, 0x7d, 0x10, 0xe9, 0x64, 0xa2, 0xb4, 0x75, 0x68,
	0x7a, 0xeb, 0x9f, 0xef, 0x2f, 0xfd, 0x74, 0xda, 0xc0, 0x2d, 0xee, 0xe1, 0x2e, 0x66, 0x28, 0x66,
	0x54, 0x50, 0x8f, 0x76, 0x51, 0xdf, 0x6d, 0x13, 0x81, 0x5d, 0xc4, 0x09, 0xeb, 0x87, 0x1e, 0x71,
	0xe4, 0x1b, 0xc6, 0x5a, 0x9a, 0x39, 0x59, 0xe6, 0xa8, 0xcc, 0xdc, 0x08, 0x28, 0x0d, 0xba, 0x04,
	0xe1, 0x38, 0x44, 0x38, 0x8a, 0xa8, 0xc0, 0x22, 0xa4, 0x11, 0x4f, 0x43, 0x73, 0x53, 0x77, 0xf5,
	0x5e, 0x42, 0xd8, 0x50, 0x45, 0x45, 0x5d, 0x24, 0x06, 0x69, 0x51, 0x79, 0xf9, 0x09, 0xe1, 0x31,
	0x0f, 0x9a, 0x29, 0xc9, 0xb8, 0x07, 0xf0, 0x6f, 0x83, 0x11, 0x2c, 0xc8, 0x89, 0x9a, 0x18, 0x8e,
	0xa3, 0x01, 0x3a, 0xb3, 0xe1, 0x19, 0xe9, 0x25, 0x84, 0x0b, 0x13, 0xe5, 0xee, 0x79, 0x4c, 0x23,
	0x4e, 0xec, 0xea, 0xd5, 0xf3, 0xfb, 0xed, 0x8f, 0xb2, 0xbd, 0x8d, 0x74, 0x5a, 0x4f, 0x0e, 0x5b,
	0xd9, 0xeb, 0x75, 0x50, 0x92, 0xd0, 0xf3, 0xd8, 0xcf, 0x07, 0x9d, 0x0d, 0x97, 0x43, 0xe7, 0xfb,
	0xdc, 0xd0, 0x44, 0x0e, 0x67, 0xa0, 0x0f, 0x00, 0xfe, 0x3b, 0xf0, 0xfd, 0x66, 0x12, 0xc7, 0x94,
	0x09, 0xe2, 0x37, 0x3a, 0x38, 0x8c, 0x0c, 0x57, 0xfb, 0xd9, 0x0b, 0x6d, 0xc6, 0xad, 0xac, 0x32,
	0x51, 0xe2, 0x7d, 0x29, 0x76, 0xed, 0x5d, 0xad, 0x18, 0xfb, 0x7e, 0x8b, 0x67, 0xe3, 0x96, 0x37,
	0x5d, 0x4f, 0xd5, 0x8f, 0x00, 0xfe, 0x4f, 0x4f, 0x61, 0x0e, 0x5e, 0x5b, 0x72, 0x68, 0xdf, 0xdb,
	0xf7, 0x56, 0x5c, 0x29, 0x7e, 0x5d, 0xf2, 0x6b, 0x36, 0x5a, 0x76, 0xe0, 0x8b, 0xdf, 0xa0, 0x72,
	0x07, 0xe0, 0x9f, 0xd3, 0xe9, 0xad, 0x90, 0xfd, 0xb5, 0xaf, 0x01, 0xfc, 0x9d, 0xfd, 0xa4, 0xdc,
	0xd8, 0xd1, 0x8a, 0x3e, 0x9b, 0x0c, 0x5f, 0xca, 0x93, 0x2a, 0x71, 0x51, 0x8a, 0x4d, 0x63, 0x5d,
	0x27, 0x3e, 0x3c, 0x7a, 0x1a, 0x5b, 0x60, 0x34, 0xb6, 0xc0, 0xdb, 0xd8, 0x02, 0x37, 0x13, 0xab,
	0x30, 0x9a, 0x58, 0x85, 0xd7, 0x89, 0x55, 0xb8, 0x70, 0x83, 0x50, 0x74, 0x92, 0xb6, 0xe3, 0xd1,
	0x4b, 0xb5, 0xa6, 0x2c, 0x50, 0x8f, 0xca, 0x1e, 0x65, 0x04, 0x0d, 0xbe, 0x2e, 0x27, 0x86, 0x31,
	0xe1, 0xed, 0x5f, 0xf2, 0x79, 0xf5, 0x23, 0x00, 0x00, 0xff, 0xff, 0x09, 0xcc, 0x10, 0xb2, 0x6b,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServiceClient interface {
	// Create protocol
	CreateProtocol(ctx context.Context, in *CreateProtocolRequest, opts ...grpc.CallOption) (*CreateProtocolResponse, error)
	UpdateProtocol(ctx context.Context, in *UpdateProtocolRequest, opts ...grpc.CallOption) (*UpdateProtocolResponse, error)
	// Add DestinationChain into protocol
	AddSupportedChain(ctx context.Context, in *AddSupportedChainRequest, opts ...grpc.CallOption) (*AddSupportedChainResponse, error)
	// Delete DestinationChain from protocol
	UpdateSupportedChain(ctx context.Context, in *UpdateSupportedChainRequest, opts ...grpc.CallOption) (*UpdateSupportedChainResponse, error)
}

type msgServiceClient struct {
	cc grpc1.ClientConn
}

func NewMsgServiceClient(cc grpc1.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) CreateProtocol(ctx context.Context, in *CreateProtocolRequest, opts ...grpc.CallOption) (*CreateProtocolResponse, error) {
	out := new(CreateProtocolResponse)
	err := c.cc.Invoke(ctx, "/scalar.protocol.v1beta1.MsgService/CreateProtocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) UpdateProtocol(ctx context.Context, in *UpdateProtocolRequest, opts ...grpc.CallOption) (*UpdateProtocolResponse, error) {
	out := new(UpdateProtocolResponse)
	err := c.cc.Invoke(ctx, "/scalar.protocol.v1beta1.MsgService/UpdateProtocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddSupportedChain(ctx context.Context, in *AddSupportedChainRequest, opts ...grpc.CallOption) (*AddSupportedChainResponse, error) {
	out := new(AddSupportedChainResponse)
	err := c.cc.Invoke(ctx, "/scalar.protocol.v1beta1.MsgService/AddSupportedChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) UpdateSupportedChain(ctx context.Context, in *UpdateSupportedChainRequest, opts ...grpc.CallOption) (*UpdateSupportedChainResponse, error) {
	out := new(UpdateSupportedChainResponse)
	err := c.cc.Invoke(ctx, "/scalar.protocol.v1beta1.MsgService/UpdateSupportedChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
type MsgServiceServer interface {
	// Create protocol
	CreateProtocol(context.Context, *CreateProtocolRequest) (*CreateProtocolResponse, error)
	UpdateProtocol(context.Context, *UpdateProtocolRequest) (*UpdateProtocolResponse, error)
	// Add DestinationChain into protocol
	AddSupportedChain(context.Context, *AddSupportedChainRequest) (*AddSupportedChainResponse, error)
	// Delete DestinationChain from protocol
	UpdateSupportedChain(context.Context, *UpdateSupportedChainRequest) (*UpdateSupportedChainResponse, error)
}

// UnimplementedMsgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (*UnimplementedMsgServiceServer) CreateProtocol(ctx context.Context, req *CreateProtocolRequest) (*CreateProtocolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProtocol not implemented")
}
func (*UnimplementedMsgServiceServer) UpdateProtocol(ctx context.Context, req *UpdateProtocolRequest) (*UpdateProtocolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProtocol not implemented")
}
func (*UnimplementedMsgServiceServer) AddSupportedChain(ctx context.Context, req *AddSupportedChainRequest) (*AddSupportedChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSupportedChain not implemented")
}
func (*UnimplementedMsgServiceServer) UpdateSupportedChain(ctx context.Context, req *UpdateSupportedChainRequest) (*UpdateSupportedChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupportedChain not implemented")
}

func RegisterMsgServiceServer(s grpc1.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_CreateProtocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProtocolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreateProtocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.protocol.v1beta1.MsgService/CreateProtocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreateProtocol(ctx, req.(*CreateProtocolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_UpdateProtocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProtocolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).UpdateProtocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.protocol.v1beta1.MsgService/UpdateProtocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).UpdateProtocol(ctx, req.(*UpdateProtocolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddSupportedChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSupportedChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddSupportedChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.protocol.v1beta1.MsgService/AddSupportedChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddSupportedChain(ctx, req.(*AddSupportedChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_UpdateSupportedChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupportedChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).UpdateSupportedChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.protocol.v1beta1.MsgService/UpdateSupportedChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).UpdateSupportedChain(ctx, req.(*UpdateSupportedChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scalar.protocol.v1beta1.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProtocol",
			Handler:    _MsgService_CreateProtocol_Handler,
		},
		{
			MethodName: "UpdateProtocol",
			Handler:    _MsgService_UpdateProtocol_Handler,
		},
		{
			MethodName: "AddSupportedChain",
			Handler:    _MsgService_AddSupportedChain_Handler,
		},
		{
			MethodName: "UpdateSupportedChain",
			Handler:    _MsgService_UpdateSupportedChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scalar/protocol/v1beta1/service.proto",
}

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// GetProtocols returns all Protocol
	Protocols(ctx context.Context, in *ProtocolsRequest, opts ...grpc.CallOption) (*ProtocolsResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) Protocols(ctx context.Context, in *ProtocolsRequest, opts ...grpc.CallOption) (*ProtocolsResponse, error) {
	out := new(ProtocolsResponse)
	err := c.cc.Invoke(ctx, "/scalar.protocol.v1beta1.QueryService/Protocols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// GetProtocols returns all Protocol
	Protocols(context.Context, *ProtocolsRequest) (*ProtocolsResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) Protocols(ctx context.Context, req *ProtocolsRequest) (*ProtocolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Protocols not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_Protocols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Protocols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.protocol.v1beta1.QueryService/Protocols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Protocols(ctx, req.(*ProtocolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scalar.protocol.v1beta1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Protocols",
			Handler:    _QueryService_Protocols_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scalar/protocol/v1beta1/service.proto",
}
