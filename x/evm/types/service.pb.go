// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/evm/v1beta1/service.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("scalar/evm/v1beta1/service.proto", fileDescriptor_20034e9f43cc5508) }
func init() {
	golang_proto.RegisterFile("scalar/evm/v1beta1/service.proto", fileDescriptor_20034e9f43cc5508)
}

var fileDescriptor_20034e9f43cc5508 = []byte{
	// 1209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x98, 0xbb, 0x6f, 0x1c, 0x45,
	0x18, 0xc0, 0x3d, 0x11, 0x98, 0x30, 0x58, 0xb1, 0x19, 0x11, 0x10, 0xe7, 0xe8, 0x6c, 0xaf, 0xdf,
	0xaf, 0x5b, 0x3f, 0x78, 0x88, 0x74, 0xb1, 0x13, 0x5e, 0x01, 0x11, 0xec, 0x54, 0x34, 0xab, 0xb9,
	0xdd, 0xf1, 0xde, 0xca, 0x77, 0x3b, 0x97, 0x99, 0xb1, 0xe3, 0x95, 0x65, 0x45, 0x8a, 0x90, 0x48,
	0x81, 0x20, 0x12, 0x0d, 0x45, 0x0a, 0x1a, 0x3a, 0x0a, 0xfe, 0x00, 0x8a, 0x94, 0x94, 0x91, 0x68,
	0x28, 0x91, 0xcd, 0xdf, 0x40, 0x8d, 0x76, 0x1e, 0x77, 0xbb, 0xeb, 0xf1, 0xf8, 0xd2, 0x5d, 0xf4,
	0xfd, 0x66, 0xbe, 0xdf, 0xdd, 0xcc, 0x37, 0xdf, 0x17, 0xc3, 0x49, 0x1e, 0xe2, 0x36, 0x66, 0x3e,
	0x39, 0xec, 0xf8, 0x87, 0xeb, 0x4d, 0x22, 0xf0, 0xba, 0xcf, 0x09, 0x3b, 0x4c, 0x42, 0xd2, 0xe8,
	0x32, 0x2a, 0x28, 0x42, 0x8a, 0x68, 0x90, 0xc3, 0x4e, 0x43, 0x13, 0xb5, 0xb7, 0x62, 0x1a, 0x53,
	0x19, 0xf6, 0xf3, 0x4f, 0x8a, 0xac, 0xdd, 0x88, 0x29, 0x8d, 0xdb, 0xc4, 0xc7, 0xdd, 0xc4, 0xc7,
	0x69, 0x4a, 0x05, 0x16, 0x09, 0x4d, 0xb9, 0x8e, 0x8e, 0x5b, 0x32, 0x89, 0x23, 0x1d, 0xac, 0x5b,
	0x82, 0x0f, 0x0e, 0x08, 0xcb, 0x54, 0x7c, 0xe3, 0x8f, 0x31, 0x08, 0xbf, 0xe4, 0xf1, 0xae, 0x32,
	0x43, 0x8f, 0x20, 0xdc, 0x25, 0xe2, 0x13, 0x2c, 0xc8, 0x43, 0x9c, 0xa1, 0xd9, 0xc6, 0x79, 0xc5,
	0x46, 0x3f, 0xbe, 0x43, 0x1e, 0x1c, 0x10, 0x2e, 0x6a, 0x73, 0x97, 0x61, 0xbc, 0x4b, 0x53, 0x4e,
	0x3c, 0xef, 0xf1, 0x5f, 0xff, 0xfe, 0x74, 0xe5, 0x86, 0xf7, 0x8e, 0x5f, 0x90, 0xe2, 0x44, 0x04,
	0xb1, 0x02, 0x6f, 0x82, 0x25, 0xf4, 0x33, 0x80, 0x63, 0xdb, 0x34, 0xdd, 0x4b, 0x58, 0x47, 0x2f,
	0xbf, 0x7f, 0x84, 0x96, 0x6d, 0x09, 0xaa, 0x94, 0xb1, 0x59, 0x19, 0x0c, 0xd6, 0x4e, 0x8b, 0xd2,
	0x69, 0xda, 0xab, 0x17, 0x9d, 0x42, 0x45, 0x1b, 0xaf, 0x40, 0x1c, 0xe5, 0x6a, 0xcf, 0x00, 0x7c,
	0xb3, 0xba, 0x0f, 0x47, 0x03, 0xa5, 0xe3, 0x46, 0x6e, 0x75, 0x40, 0x5a, 0xdb, 0x2d, 0x49, 0xbb,
	0x19, 0x6f, 0xc2, 0x6d, 0xc7, 0x73, 0xbd, 0x3d, 0xf8, 0xca, 0x17, 0x49, 0xba, 0x8f, 0x26, 0x6c,
	0x29, 0xf2, 0x88, 0x71, 0x98, 0xbc, 0x18, 0xd0, 0x69, 0xc7, 0x65, 0xda, 0xeb, 0xde, 0x58, 0x31,
	0x6d, 0x3b, 0x49, 0xf7, 0xf3, 0x3c, 0xdf, 0x01, 0x38, 0xa2, 0x8d, 0xef, 0xd3, 0x7d, 0x92, 0xa2,
	0x79, 0xc7, 0x77, 0x92, 0x84, 0x49, 0xbc, 0x70, 0x39, 0xa8, 0x05, 0x66, 0xa4, 0x40, 0xdd, 0x7b,
	0xd7, 0xf6, 0xbd, 0x45, 0x8e, 0xe6, 0x26, 0x3f, 0x02, 0x78, 0x4d, 0x2f, 0xbf, 0x4d, 0xba, 0x94,
	0x27, 0x02, 0x2d, 0x3a, 0x52, 0x68, 0xc6, 0xd8, 0x2c, 0x0d, 0x82, 0x6a, 0x9f, 0x39, 0xe9, 0x33,
	0xe9, 0x8d, 0xdb, 0x7c, 0x22, 0x05, 0xe7, 0x46, 0xbf, 0x00, 0x88, 0xcc, 0x17, 0x62, 0x38, 0xe5,
	0x7b, 0x84, 0xdd, 0x25, 0x19, 0x72, 0x9d, 0x7a, 0x81, 0x33, 0x66, 0x8d, 0x41, 0x71, 0x6d, 0xb7,
	0x2c, 0xed, 0x66, 0xbd, 0x49, 0xeb, 0xaf, 0xa5, 0x17, 0x04, 0xfb, 0x24, 0xeb, 0xdd, 0x62, 0x46,
	0xb0, 0x20, 0xb7, 0x49, 0xb7, 0x4d, 0x33, 0x75, 0x86, 0xf6, 0x5b, 0x5c, 0xc5, 0xdc, 0xb7, 0xf8,
	0x3c, 0xed, 0xbc, 0xc5, 0x12, 0xcf, 0x7f, 0xbc, 0x36, 0xcd, 0xfa, 0x67, 0x2a, 0xeb, 0x5f, 0x86,
	0xb6, 0x0e, 0x58, 0x2a, 0xf7, 0xe1, 0x17, 0xd4, 0x7f, 0x85, 0x72, 0xd7, 0xff, 0x39, 0xd8, 0x59,
	0xff, 0xca, 0xad, 0x79, 0xc0, 0x52, 0x65, 0x26, 0x0b, 0xec, 0x77, 0x00, 0xdf, 0x56, 0xfb, 0xdc,
	0x23, 0x69, 0x94, 0xa4, 0xb1, 0x39, 0x0b, 0x8e, 0xd6, 0x2f, 0xce, 0x59, 0x65, 0x8d, 0xe6, 0xc6,
	0xcb, 0x2c, 0xd1, 0xb2, 0xbe, 0x94, 0x5d, 0xf4, 0x66, 0x2c, 0xb2, 0x5d, 0xb5, 0xa8, 0x77, 0xde,
	0x52, 0xf9, 0x39, 0x80, 0x35, 0xb5, 0xa7, 0xd9, 0xec, 0xab, 0x2e, 0x61, 0x58, 0x50, 0xc6, 0x5b,
	0x49, 0x17, 0xbd, 0x7f, 0xb1, 0x83, 0x8d, 0x37, 0xea, 0x1f, 0xbc, 0xec, 0x32, 0xad, 0xbf, 0x29,
	0xf5, 0x57, 0xbd, 0x05, 0x8b, 0x7e, 0xef, 0x9a, 0xd2, 0xc2, 0x4a, 0xf3, 0xdc, 0xec, 0x26, 0x71,
	0xba, 0x4d, 0x3b, 0x1d, 0x9c, 0x46, 0xdc, 0xfe, 0xdc, 0x14, 0x09, 0xe7, 0x73, 0x53, 0x06, 0x5d,
	0xcf, 0x0d, 0x4f, 0xe2, 0x34, 0x08, 0x35, 0x9a, 0x9b, 0x3c, 0x84, 0x57, 0x6f, 0x45, 0xd1, 0x76,
	0x0b, 0x27, 0x29, 0x9a, 0xb6, 0xed, 0x6d, 0xa2, 0x46, 0x60, 0xc6, 0x0d, 0xe9, 0xe4, 0x93, 0x32,
	0x79, 0xcd, 0xbb, 0x5e, 0x4c, 0x8e, 0xa3, 0x28, 0x08, 0x73, 0xcc, 0xd4, 0xc4, 0x0e, 0x11, 0x2c,
	0xfb, 0x18, 0x27, 0x6d, 0x12, 0xdd, 0x39, 0x24, 0xa9, 0xb0, 0xd7, 0x44, 0x95, 0x72, 0xd6, 0xc4,
	0x79, 0xd8, 0x55, 0x13, 0x2c, 0xa7, 0x57, 0xf7, 0x24, 0xbe, 0x4a, 0x72, 0xfe, 0x26, 0x58, 0xda,
	0xf8, 0x6f, 0x14, 0x8e, 0x7c, 0x9d, 0x8f, 0x13, 0x66, 0x80, 0xf8, 0x15, 0xc0, 0xd1, 0x2d, 0x2c,
	0xc2, 0x16, 0x89, 0x7a, 0x27, 0x66, 0x7d, 0x69, 0x2b, 0x90, 0x31, 0x5d, 0x1e, 0x88, 0xd5, 0xa2,
	0x1f, 0x49, 0xd1, 0x4d, 0xb4, 0xee, 0x5b, 0xa6, 0x9c, 0xa6, 0x5a, 0xd4, 0x3b, 0x42, 0xff, 0x58,
	0xfe, 0xa0, 0x27, 0xfe, 0x71, 0x12, 0x9d, 0xa0, 0x6f, 0x01, 0x84, 0xf9, 0x73, 0x40, 0xd8, 0x67,
	0xe9, 0x1e, 0xb5, 0x4f, 0x3a, 0xfd, 0xb8, 0x73, 0xd2, 0x29, 0x62, 0x5a, 0x6c, 0x5e, 0x8a, 0x4d,
	0xa1, 0x09, 0xab, 0x98, 0xe4, 0x83, 0x24, 0xcf, 0xfb, 0x5b, 0xbf, 0x61, 0xc8, 0x99, 0xee, 0x53,
	0x92, 0xc4, 0x2d, 0xe1, 0x6c, 0x18, 0x05, 0x6e, 0x90, 0x86, 0x51, 0xc2, 0xb5, 0xde, 0x87, 0x52,
	0x6f, 0x1d, 0xf9, 0x36, 0xbd, 0xb0, 0xb0, 0x2e, 0x68, 0xc9, 0x85, 0xe6, 0xa7, 0xcb, 0x3b, 0xee,
	0x88, 0xee, 0x8d, 0xbb, 0x02, 0x0b, 0x62, 0x2f, 0xc6, 0x22, 0xe1, 0x2c, 0xc6, 0x32, 0xa8, 0xe5,
	0x56, 0xd4, 0xed, 0x43, 0x53, 0x36, 0x39, 0xdd, 0x6b, 0x03, 0x9e, 0x2f, 0x79, 0x72, 0x05, 0xe4,
	0x1d, 0x77, 0x54, 0xbf, 0x97, 0xee, 0xfb, 0x56, 0x81, 0x9c, 0xf7, 0xed, 0x1c, 0xab, 0xd5, 0xde,
	0x93, 0x6a, 0x0d, 0xb4, 0x62, 0x53, 0x33, 0x0f, 0x70, 0xf5, 0xbe, 0x21, 0x0e, 0x87, 0x65, 0xc5,
	0x73, 0x34, 0x65, 0x3d, 0x27, 0x19, 0x33, 0x3e, 0x9e, 0x0b, 0x29, 0xcf, 0xd1, 0xa8, 0x66, 0x3d,
	0x3e, 0x95, 0xea, 0x11, 0x7c, 0x4d, 0xeb, 0x23, 0xfb, 0x96, 0x2a, 0x68, 0xd2, 0x4e, 0x3b, 0x99,
	0xf2, 0x9c, 0x81, 0xa6, 0xed, 0xd7, 0x46, 0xc2, 0x01, 0x53, 0x3b, 0xa2, 0xef, 0x01, 0x84, 0x77,
	0x49, 0x76, 0x2b, 0x8a, 0x18, 0xe1, 0xdc, 0x5e, 0x60, 0xfd, 0xb8, 0xb3, 0xc0, 0x8a, 0x58, 0xb9,
	0x13, 0xa2, 0x79, 0x9b, 0xca, 0x3e, 0xc9, 0x02, 0xac, 0x16, 0xf4, 0x0e, 0xe1, 0x19, 0x80, 0xd7,
	0xf4, 0x80, 0x6d, 0x94, 0xac, 0xb3, 0x62, 0x99, 0x71, 0xce, 0x8a, 0x55, 0xb4, 0xdc, 0xe5, 0xd0,
	0xb2, 0x4d, 0xcd, 0xcc, 0xec, 0x55, 0xbd, 0x1f, 0x00, 0xbc, 0xba, 0x95, 0x09, 0x12, 0xd2, 0x88,
	0xd8, 0x9b, 0x8b, 0x89, 0x3a, 0x9b, 0x4b, 0x1f, 0x1a, 0xa4, 0xd2, 0x9b, 0x9a, 0xee, 0xbf, 0x8c,
	0x21, 0x4d, 0x05, 0xc3, 0xa1, 0x38, 0x41, 0x8f, 0x01, 0x7c, 0x55, 0x35, 0x1a, 0xeb, 0x7f, 0x17,
	0x4a, 0xdd, 0x65, 0xca, 0x41, 0x0c, 0x52, 0x39, 0xb2, 0x9b, 0xf4, 0x25, 0xe4, 0x3f, 0x83, 0xfc,
	0x91, 0x7e, 0x0a, 0xe0, 0x1b, 0x77, 0x76, 0xb6, 0x37, 0xd6, 0xf4, 0x1c, 0x68, 0xbd, 0x1d, 0x05,
	0xc0, 0x08, 0xcd, 0x5f, 0xca, 0x69, 0xad, 0x35, 0xa9, 0xb5, 0x84, 0x16, 0xac, 0x5a, 0x2c, 0xdc,
	0x58, 0xd3, 0xf3, 0x5f, 0xef, 0xa0, 0x9e, 0x00, 0xf8, 0xba, 0xdc, 0x44, 0xb6, 0x0d, 0xeb, 0x21,
	0xf4, 0xc2, 0x46, 0x67, 0xf6, 0x12, 0x4a, 0xcb, 0x34, 0xa4, 0xcc, 0x02, 0x9a, 0xb3, 0xc9, 0x48,
	0x0d, 0xd9, 0x33, 0x7a, 0x2a, 0xc7, 0x70, 0xf8, 0x1e, 0x66, 0xb8, 0x73, 0xc1, 0xbb, 0xa2, 0x62,
	0xce, 0x77, 0xc5, 0x20, 0xe5, 0x39, 0x1d, 0x79, 0xd6, 0xe7, 0x4d, 0xb2, 0x26, 0xf9, 0xd6, 0xe7,
	0x7f, 0x9e, 0xd6, 0xc1, 0x8b, 0xd3, 0x3a, 0xf8, 0xe7, 0xb4, 0x0e, 0x9e, 0x9e, 0xd5, 0x87, 0x9e,
	0x9f, 0xd5, 0xc1, 0x8b, 0xb3, 0xfa, 0xd0, 0xdf, 0x67, 0xf5, 0xa1, 0x6f, 0x56, 0xe2, 0x44, 0xb4,
	0x0e, 0x9a, 0x8d, 0x90, 0x76, 0xf4, 0x5e, 0x94, 0xc5, 0xfa, 0xd3, 0x6a, 0x48, 0x19, 0xf1, 0x8f,
	0xe4, 0xe6, 0x22, 0xeb, 0x12, 0xde, 0x1c, 0x96, 0x7f, 0x8a, 0xd8, 0xfc, 0x3f, 0x00, 0x00, 0xff,
	0xff, 0x44, 0x8c, 0xcf, 0x8c, 0x33, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServiceClient interface {
	SetGateway(ctx context.Context, in *SetGatewayRequest, opts ...grpc.CallOption) (*SetGatewayResponse, error)
	// Deprecated: use ConfirmGatewayTxs instead
	ConfirmGatewayTx(ctx context.Context, in *ConfirmGatewayTxRequest, opts ...grpc.CallOption) (*ConfirmGatewayTxResponse, error)
	ConfirmGatewayTxs(ctx context.Context, in *ConfirmGatewayTxsRequest, opts ...grpc.CallOption) (*ConfirmGatewayTxsResponse, error)
	Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	ConfirmToken(ctx context.Context, in *ConfirmTokenRequest, opts ...grpc.CallOption) (*ConfirmTokenResponse, error)
	ConfirmDeposit(ctx context.Context, in *ConfirmDepositRequest, opts ...grpc.CallOption) (*ConfirmDepositResponse, error)
	ConfirmTransferKey(ctx context.Context, in *ConfirmTransferKeyRequest, opts ...grpc.CallOption) (*ConfirmTransferKeyResponse, error)
	CreateDeployToken(ctx context.Context, in *CreateDeployTokenRequest, opts ...grpc.CallOption) (*CreateDeployTokenResponse, error)
	CreateBurnTokens(ctx context.Context, in *CreateBurnTokensRequest, opts ...grpc.CallOption) (*CreateBurnTokensResponse, error)
	CreatePendingTransfers(ctx context.Context, in *CreatePendingTransfersRequest, opts ...grpc.CallOption) (*CreatePendingTransfersResponse, error)
	CreateTransferOperatorship(ctx context.Context, in *CreateTransferOperatorshipRequest, opts ...grpc.CallOption) (*CreateTransferOperatorshipResponse, error)
	SignCommands(ctx context.Context, in *SignCommandsRequest, opts ...grpc.CallOption) (*SignCommandsResponse, error)
	AddChain(ctx context.Context, in *AddChainRequest, opts ...grpc.CallOption) (*AddChainResponse, error)
	RetryFailedEvent(ctx context.Context, in *RetryFailedEventRequest, opts ...grpc.CallOption) (*RetryFailedEventResponse, error)
}

type msgServiceClient struct {
	cc grpc1.ClientConn
}

func NewMsgServiceClient(cc grpc1.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) SetGateway(ctx context.Context, in *SetGatewayRequest, opts ...grpc.CallOption) (*SetGatewayResponse, error) {
	out := new(SetGatewayResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/SetGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ConfirmGatewayTx(ctx context.Context, in *ConfirmGatewayTxRequest, opts ...grpc.CallOption) (*ConfirmGatewayTxResponse, error) {
	out := new(ConfirmGatewayTxResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/ConfirmGatewayTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ConfirmGatewayTxs(ctx context.Context, in *ConfirmGatewayTxsRequest, opts ...grpc.CallOption) (*ConfirmGatewayTxsResponse, error) {
	out := new(ConfirmGatewayTxsResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/ConfirmGatewayTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/Link", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ConfirmToken(ctx context.Context, in *ConfirmTokenRequest, opts ...grpc.CallOption) (*ConfirmTokenResponse, error) {
	out := new(ConfirmTokenResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/ConfirmToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ConfirmDeposit(ctx context.Context, in *ConfirmDepositRequest, opts ...grpc.CallOption) (*ConfirmDepositResponse, error) {
	out := new(ConfirmDepositResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/ConfirmDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ConfirmTransferKey(ctx context.Context, in *ConfirmTransferKeyRequest, opts ...grpc.CallOption) (*ConfirmTransferKeyResponse, error) {
	out := new(ConfirmTransferKeyResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/ConfirmTransferKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CreateDeployToken(ctx context.Context, in *CreateDeployTokenRequest, opts ...grpc.CallOption) (*CreateDeployTokenResponse, error) {
	out := new(CreateDeployTokenResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/CreateDeployToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CreateBurnTokens(ctx context.Context, in *CreateBurnTokensRequest, opts ...grpc.CallOption) (*CreateBurnTokensResponse, error) {
	out := new(CreateBurnTokensResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/CreateBurnTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CreatePendingTransfers(ctx context.Context, in *CreatePendingTransfersRequest, opts ...grpc.CallOption) (*CreatePendingTransfersResponse, error) {
	out := new(CreatePendingTransfersResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/CreatePendingTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CreateTransferOperatorship(ctx context.Context, in *CreateTransferOperatorshipRequest, opts ...grpc.CallOption) (*CreateTransferOperatorshipResponse, error) {
	out := new(CreateTransferOperatorshipResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/CreateTransferOperatorship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) SignCommands(ctx context.Context, in *SignCommandsRequest, opts ...grpc.CallOption) (*SignCommandsResponse, error) {
	out := new(SignCommandsResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/SignCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddChain(ctx context.Context, in *AddChainRequest, opts ...grpc.CallOption) (*AddChainResponse, error) {
	out := new(AddChainResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/AddChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RetryFailedEvent(ctx context.Context, in *RetryFailedEventRequest, opts ...grpc.CallOption) (*RetryFailedEventResponse, error) {
	out := new(RetryFailedEventResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.MsgService/RetryFailedEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
type MsgServiceServer interface {
	SetGateway(context.Context, *SetGatewayRequest) (*SetGatewayResponse, error)
	// Deprecated: use ConfirmGatewayTxs instead
	ConfirmGatewayTx(context.Context, *ConfirmGatewayTxRequest) (*ConfirmGatewayTxResponse, error)
	ConfirmGatewayTxs(context.Context, *ConfirmGatewayTxsRequest) (*ConfirmGatewayTxsResponse, error)
	Link(context.Context, *LinkRequest) (*LinkResponse, error)
	ConfirmToken(context.Context, *ConfirmTokenRequest) (*ConfirmTokenResponse, error)
	ConfirmDeposit(context.Context, *ConfirmDepositRequest) (*ConfirmDepositResponse, error)
	ConfirmTransferKey(context.Context, *ConfirmTransferKeyRequest) (*ConfirmTransferKeyResponse, error)
	CreateDeployToken(context.Context, *CreateDeployTokenRequest) (*CreateDeployTokenResponse, error)
	CreateBurnTokens(context.Context, *CreateBurnTokensRequest) (*CreateBurnTokensResponse, error)
	CreatePendingTransfers(context.Context, *CreatePendingTransfersRequest) (*CreatePendingTransfersResponse, error)
	CreateTransferOperatorship(context.Context, *CreateTransferOperatorshipRequest) (*CreateTransferOperatorshipResponse, error)
	SignCommands(context.Context, *SignCommandsRequest) (*SignCommandsResponse, error)
	AddChain(context.Context, *AddChainRequest) (*AddChainResponse, error)
	RetryFailedEvent(context.Context, *RetryFailedEventRequest) (*RetryFailedEventResponse, error)
}

// UnimplementedMsgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (*UnimplementedMsgServiceServer) SetGateway(ctx context.Context, req *SetGatewayRequest) (*SetGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGateway not implemented")
}
func (*UnimplementedMsgServiceServer) ConfirmGatewayTx(ctx context.Context, req *ConfirmGatewayTxRequest) (*ConfirmGatewayTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmGatewayTx not implemented")
}
func (*UnimplementedMsgServiceServer) ConfirmGatewayTxs(ctx context.Context, req *ConfirmGatewayTxsRequest) (*ConfirmGatewayTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmGatewayTxs not implemented")
}
func (*UnimplementedMsgServiceServer) Link(ctx context.Context, req *LinkRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (*UnimplementedMsgServiceServer) ConfirmToken(ctx context.Context, req *ConfirmTokenRequest) (*ConfirmTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmToken not implemented")
}
func (*UnimplementedMsgServiceServer) ConfirmDeposit(ctx context.Context, req *ConfirmDepositRequest) (*ConfirmDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDeposit not implemented")
}
func (*UnimplementedMsgServiceServer) ConfirmTransferKey(ctx context.Context, req *ConfirmTransferKeyRequest) (*ConfirmTransferKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTransferKey not implemented")
}
func (*UnimplementedMsgServiceServer) CreateDeployToken(ctx context.Context, req *CreateDeployTokenRequest) (*CreateDeployTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployToken not implemented")
}
func (*UnimplementedMsgServiceServer) CreateBurnTokens(ctx context.Context, req *CreateBurnTokensRequest) (*CreateBurnTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBurnTokens not implemented")
}
func (*UnimplementedMsgServiceServer) CreatePendingTransfers(ctx context.Context, req *CreatePendingTransfersRequest) (*CreatePendingTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePendingTransfers not implemented")
}
func (*UnimplementedMsgServiceServer) CreateTransferOperatorship(ctx context.Context, req *CreateTransferOperatorshipRequest) (*CreateTransferOperatorshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransferOperatorship not implemented")
}
func (*UnimplementedMsgServiceServer) SignCommands(ctx context.Context, req *SignCommandsRequest) (*SignCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignCommands not implemented")
}
func (*UnimplementedMsgServiceServer) AddChain(ctx context.Context, req *AddChainRequest) (*AddChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChain not implemented")
}
func (*UnimplementedMsgServiceServer) RetryFailedEvent(ctx context.Context, req *RetryFailedEventRequest) (*RetryFailedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryFailedEvent not implemented")
}

func RegisterMsgServiceServer(s grpc1.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_SetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).SetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/SetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).SetGateway(ctx, req.(*SetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ConfirmGatewayTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmGatewayTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ConfirmGatewayTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/ConfirmGatewayTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ConfirmGatewayTx(ctx, req.(*ConfirmGatewayTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ConfirmGatewayTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmGatewayTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ConfirmGatewayTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/ConfirmGatewayTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ConfirmGatewayTxs(ctx, req.(*ConfirmGatewayTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/Link",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).Link(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ConfirmToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ConfirmToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/ConfirmToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ConfirmToken(ctx, req.(*ConfirmTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ConfirmDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ConfirmDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/ConfirmDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ConfirmDeposit(ctx, req.(*ConfirmDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ConfirmTransferKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmTransferKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ConfirmTransferKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/ConfirmTransferKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ConfirmTransferKey(ctx, req.(*ConfirmTransferKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CreateDeployToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeployTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreateDeployToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/CreateDeployToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreateDeployToken(ctx, req.(*CreateDeployTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CreateBurnTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBurnTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreateBurnTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/CreateBurnTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreateBurnTokens(ctx, req.(*CreateBurnTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CreatePendingTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePendingTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreatePendingTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/CreatePendingTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreatePendingTransfers(ctx, req.(*CreatePendingTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CreateTransferOperatorship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferOperatorshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreateTransferOperatorship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/CreateTransferOperatorship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreateTransferOperatorship(ctx, req.(*CreateTransferOperatorshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_SignCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).SignCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/SignCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).SignCommands(ctx, req.(*SignCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/AddChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddChain(ctx, req.(*AddChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RetryFailedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryFailedEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RetryFailedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.MsgService/RetryFailedEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RetryFailedEvent(ctx, req.(*RetryFailedEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scalar.evm.v1beta1.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetGateway",
			Handler:    _MsgService_SetGateway_Handler,
		},
		{
			MethodName: "ConfirmGatewayTx",
			Handler:    _MsgService_ConfirmGatewayTx_Handler,
		},
		{
			MethodName: "ConfirmGatewayTxs",
			Handler:    _MsgService_ConfirmGatewayTxs_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _MsgService_Link_Handler,
		},
		{
			MethodName: "ConfirmToken",
			Handler:    _MsgService_ConfirmToken_Handler,
		},
		{
			MethodName: "ConfirmDeposit",
			Handler:    _MsgService_ConfirmDeposit_Handler,
		},
		{
			MethodName: "ConfirmTransferKey",
			Handler:    _MsgService_ConfirmTransferKey_Handler,
		},
		{
			MethodName: "CreateDeployToken",
			Handler:    _MsgService_CreateDeployToken_Handler,
		},
		{
			MethodName: "CreateBurnTokens",
			Handler:    _MsgService_CreateBurnTokens_Handler,
		},
		{
			MethodName: "CreatePendingTransfers",
			Handler:    _MsgService_CreatePendingTransfers_Handler,
		},
		{
			MethodName: "CreateTransferOperatorship",
			Handler:    _MsgService_CreateTransferOperatorship_Handler,
		},
		{
			MethodName: "SignCommands",
			Handler:    _MsgService_SignCommands_Handler,
		},
		{
			MethodName: "AddChain",
			Handler:    _MsgService_AddChain_Handler,
		},
		{
			MethodName: "RetryFailedEvent",
			Handler:    _MsgService_RetryFailedEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scalar/evm/v1beta1/service.proto",
}

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// BatchedCommands queries the batched commands for a specified chain and
	// BatchedCommandsID if no BatchedCommandsID is specified, then it returns the
	// latest batched commands
	BatchedCommands(ctx context.Context, in *BatchedCommandsRequest, opts ...grpc.CallOption) (*BatchedCommandsResponse, error)
	// BurnerInfo queries the burner info for the specified address
	BurnerInfo(ctx context.Context, in *BurnerInfoRequest, opts ...grpc.CallOption) (*BurnerInfoResponse, error)
	// ConfirmationHeight queries the confirmation height for the specified chain
	ConfirmationHeight(ctx context.Context, in *ConfirmationHeightRequest, opts ...grpc.CallOption) (*ConfirmationHeightResponse, error)
	// DepositState queries the state of the specified deposit
	DepositState(ctx context.Context, in *DepositStateRequest, opts ...grpc.CallOption) (*DepositStateResponse, error)
	// PendingCommands queries the pending commands for the specified chain
	PendingCommands(ctx context.Context, in *PendingCommandsRequest, opts ...grpc.CallOption) (*PendingCommandsResponse, error)
	// Chains queries the available evm chains
	Chains(ctx context.Context, in *ChainsRequest, opts ...grpc.CallOption) (*ChainsResponse, error)
	// Command queries the command of a chain provided the command id
	Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	// KeyAddress queries the address of key of a chain
	KeyAddress(ctx context.Context, in *KeyAddressRequest, opts ...grpc.CallOption) (*KeyAddressResponse, error)
	// GatewayAddress queries the address of scalar gateway at the specified
	// chain
	GatewayAddress(ctx context.Context, in *GatewayAddressRequest, opts ...grpc.CallOption) (*GatewayAddressResponse, error)
	// Bytecode queries the bytecode of a specified gateway at the specified
	// chain
	Bytecode(ctx context.Context, in *BytecodeRequest, opts ...grpc.CallOption) (*BytecodeResponse, error)
	// Event queries an event at the specified chain
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	// ERC20Tokens queries the ERC20 tokens registered for a chain
	ERC20Tokens(ctx context.Context, in *ERC20TokensRequest, opts ...grpc.CallOption) (*ERC20TokensResponse, error)
	// TokenInfo queries the token info for a registered ERC20 Token
	TokenInfo(ctx context.Context, in *TokenInfoRequest, opts ...grpc.CallOption) (*TokenInfoResponse, error)
	Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) BatchedCommands(ctx context.Context, in *BatchedCommandsRequest, opts ...grpc.CallOption) (*BatchedCommandsResponse, error) {
	out := new(BatchedCommandsResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/BatchedCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) BurnerInfo(ctx context.Context, in *BurnerInfoRequest, opts ...grpc.CallOption) (*BurnerInfoResponse, error) {
	out := new(BurnerInfoResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/BurnerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ConfirmationHeight(ctx context.Context, in *ConfirmationHeightRequest, opts ...grpc.CallOption) (*ConfirmationHeightResponse, error) {
	out := new(ConfirmationHeightResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/ConfirmationHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryServiceClient) DepositState(ctx context.Context, in *DepositStateRequest, opts ...grpc.CallOption) (*DepositStateResponse, error) {
	out := new(DepositStateResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/DepositState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) PendingCommands(ctx context.Context, in *PendingCommandsRequest, opts ...grpc.CallOption) (*PendingCommandsResponse, error) {
	out := new(PendingCommandsResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/PendingCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Chains(ctx context.Context, in *ChainsRequest, opts ...grpc.CallOption) (*ChainsResponse, error) {
	out := new(ChainsResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/Chains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/Command", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) KeyAddress(ctx context.Context, in *KeyAddressRequest, opts ...grpc.CallOption) (*KeyAddressResponse, error) {
	out := new(KeyAddressResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/KeyAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GatewayAddress(ctx context.Context, in *GatewayAddressRequest, opts ...grpc.CallOption) (*GatewayAddressResponse, error) {
	out := new(GatewayAddressResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/GatewayAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Bytecode(ctx context.Context, in *BytecodeRequest, opts ...grpc.CallOption) (*BytecodeResponse, error) {
	out := new(BytecodeResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/Bytecode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/Event", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ERC20Tokens(ctx context.Context, in *ERC20TokensRequest, opts ...grpc.CallOption) (*ERC20TokensResponse, error) {
	out := new(ERC20TokensResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/ERC20Tokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) TokenInfo(ctx context.Context, in *TokenInfoRequest, opts ...grpc.CallOption) (*TokenInfoResponse, error) {
	out := new(TokenInfoResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/TokenInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error) {
	out := new(ParamsResponse)
	err := c.cc.Invoke(ctx, "/scalar.evm.v1beta1.QueryService/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// BatchedCommands queries the batched commands for a specified chain and
	// BatchedCommandsID if no BatchedCommandsID is specified, then it returns the
	// latest batched commands
	BatchedCommands(context.Context, *BatchedCommandsRequest) (*BatchedCommandsResponse, error)
	// BurnerInfo queries the burner info for the specified address
	BurnerInfo(context.Context, *BurnerInfoRequest) (*BurnerInfoResponse, error)
	// ConfirmationHeight queries the confirmation height for the specified chain
	ConfirmationHeight(context.Context, *ConfirmationHeightRequest) (*ConfirmationHeightResponse, error)
	// DepositState queries the state of the specified deposit
	DepositState(context.Context, *DepositStateRequest) (*DepositStateResponse, error)
	// PendingCommands queries the pending commands for the specified chain
	PendingCommands(context.Context, *PendingCommandsRequest) (*PendingCommandsResponse, error)
	// Chains queries the available evm chains
	Chains(context.Context, *ChainsRequest) (*ChainsResponse, error)
	// Command queries the command of a chain provided the command id
	Command(context.Context, *CommandRequest) (*CommandResponse, error)
	// KeyAddress queries the address of key of a chain
	KeyAddress(context.Context, *KeyAddressRequest) (*KeyAddressResponse, error)
	// GatewayAddress queries the address of scalar gateway at the specified
	// chain
	GatewayAddress(context.Context, *GatewayAddressRequest) (*GatewayAddressResponse, error)
	// Bytecode queries the bytecode of a specified gateway at the specified
	// chain
	Bytecode(context.Context, *BytecodeRequest) (*BytecodeResponse, error)
	// Event queries an event at the specified chain
	Event(context.Context, *EventRequest) (*EventResponse, error)
	// ERC20Tokens queries the ERC20 tokens registered for a chain
	ERC20Tokens(context.Context, *ERC20TokensRequest) (*ERC20TokensResponse, error)
	// TokenInfo queries the token info for a registered ERC20 Token
	TokenInfo(context.Context, *TokenInfoRequest) (*TokenInfoResponse, error)
	Params(context.Context, *ParamsRequest) (*ParamsResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) BatchedCommands(ctx context.Context, req *BatchedCommandsRequest) (*BatchedCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchedCommands not implemented")
}
func (*UnimplementedQueryServiceServer) BurnerInfo(ctx context.Context, req *BurnerInfoRequest) (*BurnerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnerInfo not implemented")
}
func (*UnimplementedQueryServiceServer) ConfirmationHeight(ctx context.Context, req *ConfirmationHeightRequest) (*ConfirmationHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmationHeight not implemented")
}
func (*UnimplementedQueryServiceServer) DepositState(ctx context.Context, req *DepositStateRequest) (*DepositStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositState not implemented")
}
func (*UnimplementedQueryServiceServer) PendingCommands(ctx context.Context, req *PendingCommandsRequest) (*PendingCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingCommands not implemented")
}
func (*UnimplementedQueryServiceServer) Chains(ctx context.Context, req *ChainsRequest) (*ChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chains not implemented")
}
func (*UnimplementedQueryServiceServer) Command(ctx context.Context, req *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (*UnimplementedQueryServiceServer) KeyAddress(ctx context.Context, req *KeyAddressRequest) (*KeyAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyAddress not implemented")
}
func (*UnimplementedQueryServiceServer) GatewayAddress(ctx context.Context, req *GatewayAddressRequest) (*GatewayAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayAddress not implemented")
}
func (*UnimplementedQueryServiceServer) Bytecode(ctx context.Context, req *BytecodeRequest) (*BytecodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bytecode not implemented")
}
func (*UnimplementedQueryServiceServer) Event(ctx context.Context, req *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (*UnimplementedQueryServiceServer) ERC20Tokens(ctx context.Context, req *ERC20TokensRequest) (*ERC20TokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20Tokens not implemented")
}
func (*UnimplementedQueryServiceServer) TokenInfo(ctx context.Context, req *TokenInfoRequest) (*TokenInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenInfo not implemented")
}
func (*UnimplementedQueryServiceServer) Params(ctx context.Context, req *ParamsRequest) (*ParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_BatchedCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchedCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).BatchedCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/BatchedCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).BatchedCommands(ctx, req.(*BatchedCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_BurnerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurnerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).BurnerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/BurnerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).BurnerInfo(ctx, req.(*BurnerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ConfirmationHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmationHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ConfirmationHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/ConfirmationHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ConfirmationHeight(ctx, req.(*ConfirmationHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_DepositState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).DepositState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/DepositState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).DepositState(ctx, req.(*DepositStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_PendingCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).PendingCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/PendingCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).PendingCommands(ctx, req.(*PendingCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Chains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Chains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/Chains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Chains(ctx, req.(*ChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Command_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Command(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/Command",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Command(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_KeyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).KeyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/KeyAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).KeyAddress(ctx, req.(*KeyAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GatewayAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GatewayAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/GatewayAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GatewayAddress(ctx, req.(*GatewayAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Bytecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Bytecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/Bytecode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Bytecode(ctx, req.(*BytecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/Event",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ERC20Tokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ERC20TokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ERC20Tokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/ERC20Tokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ERC20Tokens(ctx, req.(*ERC20TokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_TokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).TokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/TokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).TokenInfo(ctx, req.(*TokenInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.evm.v1beta1.QueryService/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Params(ctx, req.(*ParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scalar.evm.v1beta1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchedCommands",
			Handler:    _QueryService_BatchedCommands_Handler,
		},
		{
			MethodName: "BurnerInfo",
			Handler:    _QueryService_BurnerInfo_Handler,
		},
		{
			MethodName: "ConfirmationHeight",
			Handler:    _QueryService_ConfirmationHeight_Handler,
		},
		{
			MethodName: "DepositState",
			Handler:    _QueryService_DepositState_Handler,
		},
		{
			MethodName: "PendingCommands",
			Handler:    _QueryService_PendingCommands_Handler,
		},
		{
			MethodName: "Chains",
			Handler:    _QueryService_Chains_Handler,
		},
		{
			MethodName: "Command",
			Handler:    _QueryService_Command_Handler,
		},
		{
			MethodName: "KeyAddress",
			Handler:    _QueryService_KeyAddress_Handler,
		},
		{
			MethodName: "GatewayAddress",
			Handler:    _QueryService_GatewayAddress_Handler,
		},
		{
			MethodName: "Bytecode",
			Handler:    _QueryService_Bytecode_Handler,
		},
		{
			MethodName: "Event",
			Handler:    _QueryService_Event_Handler,
		},
		{
			MethodName: "ERC20Tokens",
			Handler:    _QueryService_ERC20Tokens_Handler,
		},
		{
			MethodName: "TokenInfo",
			Handler:    _QueryService_TokenInfo_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _QueryService_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scalar/evm/v1beta1/service.proto",
}
