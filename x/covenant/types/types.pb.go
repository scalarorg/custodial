// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/covenant/v1beta1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CustodianStatus int32

const (
	Unspecified CustodianStatus = 0
	Activated   CustodianStatus = 1
	Deactivated CustodianStatus = 2
)

var CustodianStatus_name = map[int32]string{
	0: "CUSTODIAN_STATUS_UNSPECIFIED",
	1: "CUSTODIAN_STATUS_ACTIVATED",
	2: "CUSTODIAN_STATUS_DEACTIVATED",
}

var CustodianStatus_value = map[string]int32{
	"CUSTODIAN_STATUS_UNSPECIFIED": 0,
	"CUSTODIAN_STATUS_ACTIVATED":   1,
	"CUSTODIAN_STATUS_DEACTIVATED": 2,
}

func (x CustodianStatus) String() string {
	return proto.EnumName(CustodianStatus_name, int32(x))
}

func (CustodianStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_404fd62bcdc2fd38, []int{0}
}

// Custodian represents an individual custodian configuration
type Custodian struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BtcPubkey []byte `protobuf:"bytes,2,opt,name=btc_pubkey,json=btcPubkey,proto3" json:"btc_pubkey,omitempty"`
	// "0215da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e1641488"
	Status      CustodianStatus `protobuf:"varint,3,opt,name=status,proto3,enum=scalar.covenant.v1beta1.CustodianStatus" json:"status,omitempty"`
	Description string          `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Custodian) Reset()         { *m = Custodian{} }
func (m *Custodian) String() string { return proto.CompactTextString(m) }
func (*Custodian) ProtoMessage()    {}
func (*Custodian) Descriptor() ([]byte, []int) {
	return fileDescriptor_404fd62bcdc2fd38, []int{0}
}
func (m *Custodian) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Custodian) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Custodian.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Custodian) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Custodian.Merge(m, src)
}
func (m *Custodian) XXX_Size() int {
	return m.Size()
}
func (m *Custodian) XXX_DiscardUnknown() {
	xxx_messageInfo_Custodian.DiscardUnknown(m)
}

var xxx_messageInfo_Custodian proto.InternalMessageInfo

func (m *Custodian) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Custodian) GetBtcPubkey() []byte {
	if m != nil {
		return m.BtcPubkey
	}
	return nil
}

func (m *Custodian) GetStatus() CustodianStatus {
	if m != nil {
		return m.Status
	}
	return Unspecified
}

func (m *Custodian) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// CustodianGroup represents a group of custodians with their configuration
// uid is used as identity of the group, btc_pubkey is change by list of custodians
type CustodianGroup struct {
	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BtcPubkey string `protobuf:"bytes,3,opt,name=btc_pubkey,json=btcPubkey,proto3" json:"btc_pubkey,omitempty"`
	// "tb1p07q440mdl4uyywns325dk8pvjphwety3psp4zvkngtjf3z3hhr2sfar3hv"
	Quorum      uint32          `protobuf:"varint,4,opt,name=quorum,proto3" json:"quorum,omitempty"`
	Status      CustodianStatus `protobuf:"varint,5,opt,name=status,proto3,enum=scalar.covenant.v1beta1.CustodianStatus" json:"status,omitempty"`
	Description string          `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Custodians  []*Custodian    `protobuf:"bytes,7,rep,name=custodians,proto3" json:"custodians,omitempty"`
}

func (m *CustodianGroup) Reset()         { *m = CustodianGroup{} }
func (m *CustodianGroup) String() string { return proto.CompactTextString(m) }
func (*CustodianGroup) ProtoMessage()    {}
func (*CustodianGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_404fd62bcdc2fd38, []int{1}
}
func (m *CustodianGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustodianGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustodianGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustodianGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustodianGroup.Merge(m, src)
}
func (m *CustodianGroup) XXX_Size() int {
	return m.Size()
}
func (m *CustodianGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_CustodianGroup.DiscardUnknown(m)
}

var xxx_messageInfo_CustodianGroup proto.InternalMessageInfo

func (m *CustodianGroup) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *CustodianGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustodianGroup) GetBtcPubkey() string {
	if m != nil {
		return m.BtcPubkey
	}
	return ""
}

func (m *CustodianGroup) GetQuorum() uint32 {
	if m != nil {
		return m.Quorum
	}
	return 0
}

func (m *CustodianGroup) GetStatus() CustodianStatus {
	if m != nil {
		return m.Status
	}
	return Unspecified
}

func (m *CustodianGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CustodianGroup) GetCustodians() []*Custodian {
	if m != nil {
		return m.Custodians
	}
	return nil
}

func init() {
	proto.RegisterEnum("scalar.covenant.v1beta1.CustodianStatus", CustodianStatus_name, CustodianStatus_value)
	proto.RegisterType((*Custodian)(nil), "scalar.covenant.v1beta1.Custodian")
	proto.RegisterType((*CustodianGroup)(nil), "scalar.covenant.v1beta1.CustodianGroup")
}

func init() {
	proto.RegisterFile("scalar/covenant/v1beta1/types.proto", fileDescriptor_404fd62bcdc2fd38)
}

var fileDescriptor_404fd62bcdc2fd38 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xb1, 0x6e, 0xd3, 0x40,
	0x1c, 0xc6, 0x7d, 0x49, 0x08, 0xca, 0x85, 0xb6, 0xd1, 0x09, 0x81, 0x65, 0x81, 0x65, 0x85, 0xc5,
	0x42, 0xaa, 0xad, 0x94, 0x17, 0xc0, 0x8d, 0x03, 0x8a, 0x90, 0x4a, 0x65, 0x3b, 0x0c, 0x2c, 0xd1,
	0xf9, 0x7c, 0x84, 0x13, 0xc4, 0x67, 0x7c, 0x77, 0x11, 0x7d, 0x03, 0xd4, 0x89, 0x85, 0xb1, 0x0b,
	0xac, 0x3c, 0x08, 0x63, 0x47, 0x46, 0x94, 0xbc, 0x08, 0xea, 0xc5, 0x49, 0x2d, 0x4a, 0xc4, 0xc2,
	0xf6, 0xf9, 0xef, 0xef, 0xa7, 0xef, 0xfb, 0x9f, 0xfe, 0xf0, 0x91, 0x20, 0xf8, 0x3d, 0x2e, 0x7d,
	0xc2, 0x17, 0x34, 0xc7, 0xb9, 0xf4, 0x17, 0x83, 0x94, 0x4a, 0x3c, 0xf0, 0xe5, 0x59, 0x41, 0x85,
	0x57, 0x94, 0x5c, 0x72, 0x74, 0x7f, 0x6d, 0xf2, 0x36, 0x26, 0xaf, 0x32, 0x59, 0x77, 0x67, 0x7c,
	0xc6, 0xb5, 0xc7, 0xbf, 0x52, 0x6b, 0x7b, 0xff, 0x2b, 0x80, 0x9d, 0xa1, 0x12, 0x92, 0x67, 0x0c,
	0xe7, 0x08, 0xc1, 0x56, 0x8e, 0xe7, 0xd4, 0x04, 0x0e, 0x70, 0x3b, 0x91, 0xd6, 0xe8, 0x21, 0x84,
	0xa9, 0x24, 0xd3, 0x42, 0xa5, 0xef, 0xe8, 0x99, 0xd9, 0x70, 0x80, 0x7b, 0x27, 0xea, 0xa4, 0x92,
	0x9c, 0xea, 0x01, 0x7a, 0x0a, 0xdb, 0x42, 0x62, 0xa9, 0x84, 0xd9, 0x74, 0x80, 0xbb, 0x7f, 0xe4,
	0x7a, 0x3b, 0x0a, 0x78, 0xdb, 0x98, 0x58, 0xfb, 0xa3, 0x8a, 0x43, 0x0e, 0xec, 0x66, 0x54, 0x90,
	0x92, 0x15, 0x92, 0xf1, 0xdc, 0x6c, 0xe9, 0xec, 0xfa, 0xa8, 0xff, 0xa5, 0x01, 0xf7, 0xb7, 0xf4,
	0xf3, 0x92, 0xab, 0x02, 0xf5, 0x60, 0x53, 0xb1, 0xac, 0x2a, 0x7a, 0x25, 0xb7, 0xdd, 0x1b, 0x3b,
	0xbb, 0x37, 0xf5, 0x9f, 0x5a, 0xf7, 0x7b, 0xb0, 0xfd, 0x41, 0xf1, 0x52, 0xcd, 0x75, 0xe8, 0x5e,
	0x54, 0x7d, 0xd5, 0x76, 0xba, 0xf5, 0x7f, 0x76, 0x6a, 0xdf, 0xd8, 0x09, 0x1d, 0x43, 0x48, 0x36,
	0xb0, 0x30, 0x6f, 0x3b, 0x4d, 0xb7, 0x7b, 0xd4, 0xff, 0x77, 0x4e, 0x54, 0xa3, 0x1e, 0x7f, 0x07,
	0xf0, 0xe0, 0x8f, 0x06, 0x68, 0x00, 0x1f, 0x0c, 0x27, 0x71, 0xf2, 0x32, 0x1c, 0x07, 0x27, 0xd3,
	0x38, 0x09, 0x92, 0x49, 0x3c, 0x9d, 0x9c, 0xc4, 0xa7, 0xa3, 0xe1, 0xf8, 0xd9, 0x78, 0x14, 0xf6,
	0x0c, 0xeb, 0xe0, 0xfc, 0xc2, 0xe9, 0x4e, 0x72, 0x51, 0x50, 0xc2, 0xde, 0x30, 0x9a, 0xa1, 0x43,
	0x68, 0xdd, 0x40, 0x82, 0x61, 0x32, 0x7e, 0x15, 0x24, 0xa3, 0xb0, 0x07, 0xac, 0xbd, 0xf3, 0x0b,
	0xa7, 0x13, 0x10, 0xc9, 0x16, 0x58, 0xd2, 0xec, 0xaf, 0x09, 0xe1, 0xe8, 0x1a, 0x68, 0xac, 0x13,
	0x42, 0x8a, 0x37, 0x88, 0xd5, 0xfa, 0xf4, 0xcd, 0x36, 0x8e, 0x5f, 0xfc, 0x58, 0xda, 0xe0, 0x72,
	0x69, 0x83, 0x5f, 0x4b, 0x1b, 0x7c, 0x5e, 0xd9, 0xc6, 0xe5, 0xca, 0x36, 0x7e, 0xae, 0x6c, 0xe3,
	0xf5, 0x60, 0xc6, 0xe4, 0x5b, 0x95, 0x7a, 0x84, 0xcf, 0xfd, 0xf5, 0x13, 0xf0, 0x72, 0x56, 0xa9,
	0x43, 0xc2, 0x4b, 0xea, 0x7f, 0xbc, 0xbe, 0x7a, 0x7d, 0xed, 0x69, 0x5b, 0xdf, 0xef, 0x93, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x65, 0x39, 0x6b, 0x15, 0x03, 0x00, 0x00,
}

func (m *Custodian) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Custodian) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Custodian) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BtcPubkey) > 0 {
		i -= len(m.BtcPubkey)
		copy(dAtA[i:], m.BtcPubkey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BtcPubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustodianGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustodianGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustodianGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Custodians) > 0 {
		for iNdEx := len(m.Custodians) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Custodians[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Quorum != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Quorum))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BtcPubkey) > 0 {
		i -= len(m.BtcPubkey)
		copy(dAtA[i:], m.BtcPubkey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BtcPubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Custodian) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BtcPubkey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CustodianGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BtcPubkey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Quorum != 0 {
		n += 1 + sovTypes(uint64(m.Quorum))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Custodians) > 0 {
		for _, e := range m.Custodians {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Custodian) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Custodian: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Custodian: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcPubkey = append(m.BtcPubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.BtcPubkey == nil {
				m.BtcPubkey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CustodianStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustodianGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustodianGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustodianGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quorum", wireType)
			}
			m.Quorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quorum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CustodianStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custodians", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Custodians = append(m.Custodians, &Custodian{})
			if err := m.Custodians[len(m.Custodians)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
