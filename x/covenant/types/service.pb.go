// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/covenant/v1beta1/service.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("scalar/covenant/v1beta1/service.proto", fileDescriptor_b96b94daf72c97ef)
}

var fileDescriptor_b96b94daf72c97ef = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x41, 0x6b, 0xd4, 0x40,
	0x18, 0x86, 0x77, 0x14, 0x7a, 0x18, 0x04, 0x61, 0x2a, 0x28, 0x8b, 0x44, 0x8d, 0xda, 0xe2, 0x56,
	0x13, 0xd3, 0x8d, 0x60, 0xf7, 0x22, 0x5a, 0xd0, 0x83, 0x08, 0xda, 0xad, 0x17, 0x2f, 0x61, 0x36,
	0x19, 0x63, 0xa0, 0xc9, 0x4c, 0x67, 0x26, 0x4b, 0x7b, 0xed, 0x2f, 0x10, 0xfa, 0x23, 0x04, 0x2f,
	0x9e, 0xc5, 0x83, 0xd7, 0x1e, 0x0b, 0xbd, 0x78, 0x94, 0x5d, 0x7f, 0x88, 0xec, 0x24, 0xd9, 0x74,
	0xd3, 0x9d, 0x4d, 0x96, 0xde, 0xf6, 0xf0, 0xbe, 0x5f, 0x9e, 0xe7, 0x0b, 0xf9, 0x16, 0x3e, 0x14,
	0x3e, 0xde, 0xc3, 0xdc, 0xf6, 0xe9, 0x90, 0x24, 0x38, 0x91, 0xf6, 0xd0, 0x19, 0x10, 0x89, 0x1d,
	0x5b, 0x10, 0x3e, 0x8c, 0x7c, 0x62, 0x31, 0x4e, 0x25, 0x45, 0x37, 0xb3, 0x98, 0x55, 0xc4, 0xac,
	0x3c, 0xd6, 0xbe, 0x1d, 0x52, 0x1a, 0xee, 0x11, 0x1b, 0xb3, 0xc8, 0xc6, 0x49, 0x42, 0x25, 0x96,
	0x11, 0x4d, 0x44, 0x56, 0x6b, 0xdf, 0xd7, 0x4d, 0xdf, 0x4f, 0x09, 0x3f, 0xcc, 0x43, 0x77, 0x75,
	0x21, 0x79, 0x90, 0x25, 0x36, 0x7f, 0x40, 0x08, 0xdf, 0x89, 0xb0, 0x9f, 0x21, 0xa1, 0xef, 0x00,
	0x5e, 0xdf, 0xe6, 0x04, 0x4b, 0xb2, 0x9d, 0x0a, 0x49, 0x83, 0x08, 0x27, 0xc8, 0xb6, 0x34, 0x84,
	0x56, 0x25, 0xb9, 0x43, 0xf6, 0x53, 0x22, 0x64, 0xfb, 0x69, 0xf3, 0x82, 0x60, 0x34, 0x11, 0xc4,
	0x74, 0x8f, 0xce, 0xfe, 0x1d, 0x5f, 0xb1, 0xcc, 0x47, 0xb6, 0x0e, 0xd8, 0x57, 0x4d, 0xcf, 0x2f,
	0xaa, 0x3d, 0xd0, 0x51, 0xb0, 0x1f, 0x59, 0xd0, 0x10, 0xb6, 0x92, 0xac, 0x87, 0xbd, 0x50, 0x68,
	0x0c, 0x9b, 0xaa, 0xe6, 0x2c, 0xec, 0x6f, 0x00, 0x6f, 0x54, 0xf4, 0xdf, 0x70, 0x9a, 0x32, 0xe4,
	0x36, 0xdd, 0x96, 0x8a, 0x17, 0xd8, 0xcf, 0x96, 0x6c, 0xe5, 0xec, 0x3d, 0xc5, 0xee, 0x9a, 0x76,
	0xe3, 0x45, 0x7b, 0xe1, 0x64, 0x40, 0x61, 0x50, 0xd9, 0x49, 0x9d, 0xc1, 0xbc, 0x78, 0xbd, 0xc1,
	0xfc, 0x56, 0x63, 0x83, 0xea, 0xf6, 0x4b, 0x83, 0x9f, 0x00, 0xae, 0xbe, 0x0c, 0x82, 0xe9, 0xe4,
	0x5d, 0x9a, 0x09, 0x74, 0xb5, 0x28, 0x73, 0xd2, 0x05, 0xbf, 0xa3, 0x7f, 0x03, 0x17, 0x1a, 0x8d,
	0xd9, 0x71, 0x10, 0x9c, 0x03, 0x97, 0xb4, 0x64, 0x3f, 0x01, 0xf0, 0xd6, 0x0e, 0x89, 0xe9, 0xb0,
	0x5c, 0xcc, 0x6b, 0x4e, 0xe3, 0x4c, 0xe0, 0xb9, 0x96, 0x45, 0x57, 0xb9, 0x84, 0xc5, 0x0b, 0x65,
	0xb1, 0x65, 0xba, 0x5a, 0x0b, 0xae, 0x1e, 0x7a, 0x4e, 0xe4, 0x33, 0xa7, 0x71, 0xa9, 0xf2, 0x0b,
	0xc0, 0xd5, 0x7e, 0x3a, 0x88, 0x23, 0xb9, 0x8b, 0x59, 0xdf, 0xe7, 0x11, 0x93, 0xfd, 0x28, 0x14,
	0x0b, 0x5e, 0xc3, 0x9c, 0x74, 0x21, 0xe0, 0x2e, 0x57, 0xca, 0x1d, 0xb6, 0x94, 0x43, 0xd7, 0xb4,
	0xb4, 0x0e, 0x42, 0xb5, 0x3d, 0x89, 0x99, 0x27, 0x54, 0xdf, 0x13, 0x51, 0xd8, 0x03, 0x9d, 0xcd,
	0xb3, 0xab, 0xf0, 0xda, 0x87, 0xc9, 0x8d, 0x2d, 0x6e, 0xe6, 0x31, 0x80, 0x70, 0xba, 0x2c, 0x81,
	0x3a, 0xf5, 0x1b, 0x9d, 0xc2, 0x6f, 0x34, 0xca, 0xe6, 0xcc, 0x8f, 0x15, 0xf3, 0x1a, 0x7a, 0x50,
	0x32, 0x27, 0xd5, 0x8f, 0xb7, 0xc4, 0xf8, 0x36, 0xb9, 0xe4, 0x33, 0x9f, 0x90, 0x58, 0x74, 0xc9,
	0x67, 0x93, 0x0d, 0x2e, 0x79, 0xb5, 0x90, 0x43, 0x3a, 0x0a, 0x72, 0x03, 0x2d, 0xb8, 0xe4, 0xb3,
	0xdf, 0xa5, 0x40, 0x47, 0x00, 0xae, 0xbc, 0xc7, 0x1c, 0xc7, 0x02, 0xad, 0x69, 0x9f, 0x97, 0x05,
	0x0a, 0xae, 0xf5, 0xda, 0x5c, 0x8e, 0xb3, 0xae, 0x70, 0xee, 0xa1, 0x3b, 0x5a, 0x1c, 0xa6, 0x0a,
	0xaf, 0xde, 0x9e, 0x8c, 0x0c, 0x70, 0x3a, 0x32, 0xc0, 0xdf, 0x91, 0x01, 0xbe, 0x8e, 0x8d, 0xd6,
	0xe9, 0xd8, 0x68, 0xfd, 0x19, 0x1b, 0xad, 0x4f, 0x4e, 0x18, 0xc9, 0x2f, 0xe9, 0xc0, 0xf2, 0x69,
	0x9c, 0x0f, 0xa1, 0x3c, 0xcc, 0x7f, 0x3d, 0xf1, 0x29, 0x27, 0xf6, 0x41, 0x39, 0x55, 0x1e, 0x32,
	0x22, 0x06, 0x2b, 0xea, 0xbf, 0xb5, 0xfb, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x73, 0xd5, 0xb1, 0xbd,
	0x02, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServiceClient interface {
	// Create custodian
	CreateCustodian(ctx context.Context, in *CreateCustodianRequest, opts ...grpc.CallOption) (*CreateCustodianResponse, error)
	// Update custodian
	UpdateCustodian(ctx context.Context, in *UpdateCustodianRequest, opts ...grpc.CallOption) (*UpdateCustodianResponse, error)
	// Create custodian group
	CreateCustodianGroup(ctx context.Context, in *CreateCustodianGroupRequest, opts ...grpc.CallOption) (*CreateCustodianGroupResponse, error)
	// Update Custodian group
	UpdateCustodianGroup(ctx context.Context, in *UpdateCustodianGroupRequest, opts ...grpc.CallOption) (*UpdateCustodianGroupResponse, error)
	// Add Custodian to custodian group
	// recalculate taproot pubkey when adding custodian to custodian group
	AddCustodianToGroup(ctx context.Context, in *AddCustodianToGroupRequest, opts ...grpc.CallOption) (*CustodianToGroupResponse, error)
	// Remove Custodian from custodian group
	// recalculate taproot address when deleting custodian from custodian group
	RemoveCustodianFromGroup(ctx context.Context, in *RemoveCustodianFromGroupRequest, opts ...grpc.CallOption) (*CustodianToGroupResponse, error)
	SubmitTapScriptSigs(ctx context.Context, in *SubmitTapScriptSigsRequest, opts ...grpc.CallOption) (*SubmitTapScriptSigsResponse, error)
}

type msgServiceClient struct {
	cc grpc1.ClientConn
}

func NewMsgServiceClient(cc grpc1.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) CreateCustodian(ctx context.Context, in *CreateCustodianRequest, opts ...grpc.CallOption) (*CreateCustodianResponse, error) {
	out := new(CreateCustodianResponse)
	err := c.cc.Invoke(ctx, "/scalar.covenant.v1beta1.MsgService/CreateCustodian", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) UpdateCustodian(ctx context.Context, in *UpdateCustodianRequest, opts ...grpc.CallOption) (*UpdateCustodianResponse, error) {
	out := new(UpdateCustodianResponse)
	err := c.cc.Invoke(ctx, "/scalar.covenant.v1beta1.MsgService/UpdateCustodian", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CreateCustodianGroup(ctx context.Context, in *CreateCustodianGroupRequest, opts ...grpc.CallOption) (*CreateCustodianGroupResponse, error) {
	out := new(CreateCustodianGroupResponse)
	err := c.cc.Invoke(ctx, "/scalar.covenant.v1beta1.MsgService/CreateCustodianGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) UpdateCustodianGroup(ctx context.Context, in *UpdateCustodianGroupRequest, opts ...grpc.CallOption) (*UpdateCustodianGroupResponse, error) {
	out := new(UpdateCustodianGroupResponse)
	err := c.cc.Invoke(ctx, "/scalar.covenant.v1beta1.MsgService/UpdateCustodianGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddCustodianToGroup(ctx context.Context, in *AddCustodianToGroupRequest, opts ...grpc.CallOption) (*CustodianToGroupResponse, error) {
	out := new(CustodianToGroupResponse)
	err := c.cc.Invoke(ctx, "/scalar.covenant.v1beta1.MsgService/AddCustodianToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RemoveCustodianFromGroup(ctx context.Context, in *RemoveCustodianFromGroupRequest, opts ...grpc.CallOption) (*CustodianToGroupResponse, error) {
	out := new(CustodianToGroupResponse)
	err := c.cc.Invoke(ctx, "/scalar.covenant.v1beta1.MsgService/RemoveCustodianFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) SubmitTapScriptSigs(ctx context.Context, in *SubmitTapScriptSigsRequest, opts ...grpc.CallOption) (*SubmitTapScriptSigsResponse, error) {
	out := new(SubmitTapScriptSigsResponse)
	err := c.cc.Invoke(ctx, "/scalar.covenant.v1beta1.MsgService/SubmitTapScriptSigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
type MsgServiceServer interface {
	// Create custodian
	CreateCustodian(context.Context, *CreateCustodianRequest) (*CreateCustodianResponse, error)
	// Update custodian
	UpdateCustodian(context.Context, *UpdateCustodianRequest) (*UpdateCustodianResponse, error)
	// Create custodian group
	CreateCustodianGroup(context.Context, *CreateCustodianGroupRequest) (*CreateCustodianGroupResponse, error)
	// Update Custodian group
	UpdateCustodianGroup(context.Context, *UpdateCustodianGroupRequest) (*UpdateCustodianGroupResponse, error)
	// Add Custodian to custodian group
	// recalculate taproot pubkey when adding custodian to custodian group
	AddCustodianToGroup(context.Context, *AddCustodianToGroupRequest) (*CustodianToGroupResponse, error)
	// Remove Custodian from custodian group
	// recalculate taproot address when deleting custodian from custodian group
	RemoveCustodianFromGroup(context.Context, *RemoveCustodianFromGroupRequest) (*CustodianToGroupResponse, error)
	SubmitTapScriptSigs(context.Context, *SubmitTapScriptSigsRequest) (*SubmitTapScriptSigsResponse, error)
}

// UnimplementedMsgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (*UnimplementedMsgServiceServer) CreateCustodian(ctx context.Context, req *CreateCustodianRequest) (*CreateCustodianResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustodian not implemented")
}
func (*UnimplementedMsgServiceServer) UpdateCustodian(ctx context.Context, req *UpdateCustodianRequest) (*UpdateCustodianResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustodian not implemented")
}
func (*UnimplementedMsgServiceServer) CreateCustodianGroup(ctx context.Context, req *CreateCustodianGroupRequest) (*CreateCustodianGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustodianGroup not implemented")
}
func (*UnimplementedMsgServiceServer) UpdateCustodianGroup(ctx context.Context, req *UpdateCustodianGroupRequest) (*UpdateCustodianGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustodianGroup not implemented")
}
func (*UnimplementedMsgServiceServer) AddCustodianToGroup(ctx context.Context, req *AddCustodianToGroupRequest) (*CustodianToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustodianToGroup not implemented")
}
func (*UnimplementedMsgServiceServer) RemoveCustodianFromGroup(ctx context.Context, req *RemoveCustodianFromGroupRequest) (*CustodianToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCustodianFromGroup not implemented")
}
func (*UnimplementedMsgServiceServer) SubmitTapScriptSigs(ctx context.Context, req *SubmitTapScriptSigsRequest) (*SubmitTapScriptSigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTapScriptSigs not implemented")
}

func RegisterMsgServiceServer(s grpc1.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_CreateCustodian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustodianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreateCustodian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.covenant.v1beta1.MsgService/CreateCustodian",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreateCustodian(ctx, req.(*CreateCustodianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_UpdateCustodian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustodianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).UpdateCustodian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.covenant.v1beta1.MsgService/UpdateCustodian",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).UpdateCustodian(ctx, req.(*UpdateCustodianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CreateCustodianGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustodianGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreateCustodianGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.covenant.v1beta1.MsgService/CreateCustodianGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreateCustodianGroup(ctx, req.(*CreateCustodianGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_UpdateCustodianGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustodianGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).UpdateCustodianGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.covenant.v1beta1.MsgService/UpdateCustodianGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).UpdateCustodianGroup(ctx, req.(*UpdateCustodianGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddCustodianToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustodianToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddCustodianToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.covenant.v1beta1.MsgService/AddCustodianToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddCustodianToGroup(ctx, req.(*AddCustodianToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RemoveCustodianFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCustodianFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RemoveCustodianFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.covenant.v1beta1.MsgService/RemoveCustodianFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RemoveCustodianFromGroup(ctx, req.(*RemoveCustodianFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_SubmitTapScriptSigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTapScriptSigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).SubmitTapScriptSigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.covenant.v1beta1.MsgService/SubmitTapScriptSigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).SubmitTapScriptSigs(ctx, req.(*SubmitTapScriptSigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scalar.covenant.v1beta1.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustodian",
			Handler:    _MsgService_CreateCustodian_Handler,
		},
		{
			MethodName: "UpdateCustodian",
			Handler:    _MsgService_UpdateCustodian_Handler,
		},
		{
			MethodName: "CreateCustodianGroup",
			Handler:    _MsgService_CreateCustodianGroup_Handler,
		},
		{
			MethodName: "UpdateCustodianGroup",
			Handler:    _MsgService_UpdateCustodianGroup_Handler,
		},
		{
			MethodName: "AddCustodianToGroup",
			Handler:    _MsgService_AddCustodianToGroup_Handler,
		},
		{
			MethodName: "RemoveCustodianFromGroup",
			Handler:    _MsgService_RemoveCustodianFromGroup_Handler,
		},
		{
			MethodName: "SubmitTapScriptSigs",
			Handler:    _MsgService_SubmitTapScriptSigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scalar/covenant/v1beta1/service.proto",
}

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Get custodians
	Custodians(ctx context.Context, in *CustodiansRequest, opts ...grpc.CallOption) (*CustodiansResponse, error)
	// Get custodian groups
	CustodianGroups(ctx context.Context, in *CustodianGroupsRequest, opts ...grpc.CallOption) (*CustodianGroupsResponse, error)
	Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) Custodians(ctx context.Context, in *CustodiansRequest, opts ...grpc.CallOption) (*CustodiansResponse, error) {
	out := new(CustodiansResponse)
	err := c.cc.Invoke(ctx, "/scalar.covenant.v1beta1.QueryService/Custodians", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CustodianGroups(ctx context.Context, in *CustodianGroupsRequest, opts ...grpc.CallOption) (*CustodianGroupsResponse, error) {
	out := new(CustodianGroupsResponse)
	err := c.cc.Invoke(ctx, "/scalar.covenant.v1beta1.QueryService/CustodianGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error) {
	out := new(ParamsResponse)
	err := c.cc.Invoke(ctx, "/scalar.covenant.v1beta1.QueryService/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// Get custodians
	Custodians(context.Context, *CustodiansRequest) (*CustodiansResponse, error)
	// Get custodian groups
	CustodianGroups(context.Context, *CustodianGroupsRequest) (*CustodianGroupsResponse, error)
	Params(context.Context, *ParamsRequest) (*ParamsResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) Custodians(ctx context.Context, req *CustodiansRequest) (*CustodiansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Custodians not implemented")
}
func (*UnimplementedQueryServiceServer) CustodianGroups(ctx context.Context, req *CustodianGroupsRequest) (*CustodianGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustodianGroups not implemented")
}
func (*UnimplementedQueryServiceServer) Params(ctx context.Context, req *ParamsRequest) (*ParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_Custodians_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustodiansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Custodians(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.covenant.v1beta1.QueryService/Custodians",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Custodians(ctx, req.(*CustodiansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CustodianGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustodianGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CustodianGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.covenant.v1beta1.QueryService/CustodianGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CustodianGroups(ctx, req.(*CustodianGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scalar.covenant.v1beta1.QueryService/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Params(ctx, req.(*ParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scalar.covenant.v1beta1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Custodians",
			Handler:    _QueryService_Custodians_Handler,
		},
		{
			MethodName: "CustodianGroups",
			Handler:    _QueryService_CustodianGroups_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _QueryService_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scalar/covenant/v1beta1/service.proto",
}
