// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/permission/v1beta1/tx.proto

package types

import (
	fmt "fmt"
	multisig "github.com/cosmos/cosmos-sdk/crypto/keys/multisig"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/scalarorg/scalar-core/x/permission/exported"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateGovernanceKeyRequest struct {
	Sender        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	GovernanceKey multisig.LegacyAminoPubKey                    `protobuf:"bytes,2,opt,name=governance_key,json=governanceKey,proto3" json:"governance_key"`
}

func (m *UpdateGovernanceKeyRequest) Reset()         { *m = UpdateGovernanceKeyRequest{} }
func (m *UpdateGovernanceKeyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateGovernanceKeyRequest) ProtoMessage()    {}
func (*UpdateGovernanceKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_097e3d64101df2bf, []int{0}
}
func (m *UpdateGovernanceKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGovernanceKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGovernanceKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGovernanceKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGovernanceKeyRequest.Merge(m, src)
}
func (m *UpdateGovernanceKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGovernanceKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGovernanceKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGovernanceKeyRequest proto.InternalMessageInfo

type UpdateGovernanceKeyResponse struct {
}

func (m *UpdateGovernanceKeyResponse) Reset()         { *m = UpdateGovernanceKeyResponse{} }
func (m *UpdateGovernanceKeyResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateGovernanceKeyResponse) ProtoMessage()    {}
func (*UpdateGovernanceKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_097e3d64101df2bf, []int{1}
}
func (m *UpdateGovernanceKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGovernanceKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGovernanceKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGovernanceKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGovernanceKeyResponse.Merge(m, src)
}
func (m *UpdateGovernanceKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGovernanceKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGovernanceKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGovernanceKeyResponse proto.InternalMessageInfo

// MsgRegisterController represents a message to register a controller account
type RegisterControllerRequest struct {
	Sender     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	Controller github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=controller,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"controller,omitempty"`
}

func (m *RegisterControllerRequest) Reset()         { *m = RegisterControllerRequest{} }
func (m *RegisterControllerRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterControllerRequest) ProtoMessage()    {}
func (*RegisterControllerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_097e3d64101df2bf, []int{2}
}
func (m *RegisterControllerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterControllerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterControllerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterControllerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterControllerRequest.Merge(m, src)
}
func (m *RegisterControllerRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterControllerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterControllerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterControllerRequest proto.InternalMessageInfo

type RegisterControllerResponse struct {
}

func (m *RegisterControllerResponse) Reset()         { *m = RegisterControllerResponse{} }
func (m *RegisterControllerResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterControllerResponse) ProtoMessage()    {}
func (*RegisterControllerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_097e3d64101df2bf, []int{3}
}
func (m *RegisterControllerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterControllerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterControllerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterControllerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterControllerResponse.Merge(m, src)
}
func (m *RegisterControllerResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterControllerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterControllerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterControllerResponse proto.InternalMessageInfo

// DeregisterController represents a message to deregister a controller account
type DeregisterControllerRequest struct {
	Sender     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	Controller github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=controller,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"controller,omitempty"`
}

func (m *DeregisterControllerRequest) Reset()         { *m = DeregisterControllerRequest{} }
func (m *DeregisterControllerRequest) String() string { return proto.CompactTextString(m) }
func (*DeregisterControllerRequest) ProtoMessage()    {}
func (*DeregisterControllerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_097e3d64101df2bf, []int{4}
}
func (m *DeregisterControllerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeregisterControllerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeregisterControllerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeregisterControllerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeregisterControllerRequest.Merge(m, src)
}
func (m *DeregisterControllerRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeregisterControllerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeregisterControllerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeregisterControllerRequest proto.InternalMessageInfo

type DeregisterControllerResponse struct {
}

func (m *DeregisterControllerResponse) Reset()         { *m = DeregisterControllerResponse{} }
func (m *DeregisterControllerResponse) String() string { return proto.CompactTextString(m) }
func (*DeregisterControllerResponse) ProtoMessage()    {}
func (*DeregisterControllerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_097e3d64101df2bf, []int{5}
}
func (m *DeregisterControllerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeregisterControllerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeregisterControllerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeregisterControllerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeregisterControllerResponse.Merge(m, src)
}
func (m *DeregisterControllerResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeregisterControllerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeregisterControllerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeregisterControllerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UpdateGovernanceKeyRequest)(nil), "scalar.permission.v1beta1.UpdateGovernanceKeyRequest")
	proto.RegisterType((*UpdateGovernanceKeyResponse)(nil), "scalar.permission.v1beta1.UpdateGovernanceKeyResponse")
	proto.RegisterType((*RegisterControllerRequest)(nil), "scalar.permission.v1beta1.RegisterControllerRequest")
	proto.RegisterType((*RegisterControllerResponse)(nil), "scalar.permission.v1beta1.RegisterControllerResponse")
	proto.RegisterType((*DeregisterControllerRequest)(nil), "scalar.permission.v1beta1.DeregisterControllerRequest")
	proto.RegisterType((*DeregisterControllerResponse)(nil), "scalar.permission.v1beta1.DeregisterControllerResponse")
}

func init() {
	proto.RegisterFile("scalar/permission/v1beta1/tx.proto", fileDescriptor_097e3d64101df2bf)
}

var fileDescriptor_097e3d64101df2bf = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x93, 0xbf, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0x63, 0x38, 0xdd, 0x60, 0x7e, 0x0c, 0x15, 0x43, 0x2f, 0x77, 0xf8, 0x8e, 0x4c, 0xc7,
	0x50, 0x5b, 0xe5, 0x36, 0xb6, 0x16, 0x24, 0x84, 0x8e, 0x81, 0x46, 0x82, 0x81, 0x05, 0x25, 0xce,
	0x93, 0x89, 0x9a, 0xe4, 0x05, 0xdb, 0xa9, 0x9a, 0x8d, 0x3f, 0x81, 0x7f, 0x86, 0x19, 0x31, 0x20,
	0x75, 0xec, 0xc8, 0x54, 0x41, 0xfb, 0x5f, 0x30, 0x21, 0x12, 0xb7, 0x8d, 0x44, 0x27, 0x24, 0x06,
	0x26, 0x7b, 0xf8, 0xbc, 0xef, 0xfb, 0x7e, 0x86, 0x47, 0x03, 0x23, 0xa3, 0x2c, 0xd2, 0xa2, 0x04,
	0x9d, 0xa7, 0xc6, 0xa4, 0x58, 0x88, 0xd9, 0x30, 0x06, 0x1b, 0x0d, 0x85, 0x9d, 0xf3, 0x52, 0xa3,
	0xc5, 0xde, 0x49, 0xcb, 0xf0, 0x3d, 0xc3, 0x1d, 0xe3, 0xdf, 0x53, 0xa8, 0xb0, 0xa1, 0xc4, 0xef,
	0x5f, 0x3b, 0xe0, 0x3f, 0x90, 0x68, 0x72, 0x34, 0x42, 0xea, 0xba, 0xb4, 0x28, 0xf2, 0x2a, 0xb3,
	0xa9, 0x49, 0x95, 0x98, 0x42, 0x6d, 0x1c, 0xc2, 0xff, 0xdc, 0x0b, 0xf3, 0x12, 0xb5, 0x85, 0x64,
	0x5f, 0xa0, 0x2e, 0xc1, 0xf1, 0xc1, 0x57, 0x42, 0xfd, 0x57, 0x65, 0x12, 0x59, 0x78, 0x86, 0x33,
	0xd0, 0x45, 0x54, 0x48, 0xb8, 0x86, 0x3a, 0x84, 0xf7, 0x15, 0x18, 0xdb, 0x7b, 0x4e, 0x8f, 0x0d,
	0x14, 0x09, 0xe8, 0x3e, 0xb9, 0x20, 0x97, 0xb7, 0xc7, 0xc3, 0x9f, 0xab, 0xf3, 0x81, 0x4a, 0xed,
	0xbb, 0x2a, 0xe6, 0x12, 0x73, 0xb1, 0x2d, 0xd4, 0x3c, 0x03, 0x93, 0x4c, 0x5d, 0xf8, 0x48, 0xca,
	0x51, 0x92, 0x68, 0x30, 0x26, 0x74, 0x01, 0xbd, 0xd7, 0xf4, 0xae, 0xda, 0xad, 0x78, 0x3b, 0x85,
	0xba, 0x7f, 0xe3, 0x82, 0x5c, 0xde, 0x7a, 0xf4, 0x90, 0xb7, 0xd3, 0xbc, 0xb5, 0xe2, 0x5b, 0x2b,
	0xfe, 0x02, 0x54, 0x24, 0xeb, 0x51, 0x9e, 0x16, 0xf8, 0xb2, 0x8a, 0xaf, 0xa1, 0x1e, 0x1f, 0x2d,
	0x56, 0xe7, 0x5e, 0x78, 0x47, 0x75, 0x9b, 0x3e, 0x3e, 0xfa, 0xf0, 0xa9, 0x7f, 0x33, 0xb8, 0x4f,
	0x4f, 0x0f, 0x6a, 0x98, 0x12, 0x0b, 0x03, 0xc1, 0x67, 0x42, 0x4f, 0x42, 0x50, 0xa9, 0xb1, 0xa0,
	0x9f, 0x60, 0x61, 0x35, 0x66, 0x19, 0xe8, 0x7f, 0x60, 0x39, 0xa1, 0x54, 0xee, 0xf2, 0x1b, 0xc3,
	0xbf, 0x8a, 0xeb, 0x84, 0x38, 0xc1, 0x33, 0xea, 0x1f, 0x12, 0x70, 0x7e, 0x5f, 0x08, 0x3d, 0x7d,
	0x0a, 0xfa, 0xbf, 0x36, 0x64, 0xf4, 0xec, 0xb0, 0x42, 0xeb, 0x38, 0x9e, 0x2c, 0x7e, 0x30, 0x6f,
	0xb1, 0x66, 0x64, 0xb9, 0x66, 0xe4, 0xfb, 0x9a, 0x91, 0x8f, 0x1b, 0xe6, 0x2d, 0x37, 0xcc, 0xfb,
	0xb6, 0x61, 0xde, 0x9b, 0xab, 0xce, 0xfa, 0xf6, 0x06, 0x50, 0x2b, 0xf7, 0x1b, 0x48, 0xd4, 0x20,
	0xe6, 0xdd, 0xa3, 0x68, 0xfa, 0xc4, 0xc7, 0xcd, 0x11, 0x5c, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0xda, 0x8a, 0xf0, 0x8f, 0xae, 0x03, 0x00, 0x00,
}

func (m *UpdateGovernanceKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGovernanceKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGovernanceKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GovernanceKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateGovernanceKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGovernanceKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGovernanceKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RegisterControllerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterControllerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterControllerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterControllerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterControllerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterControllerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeregisterControllerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeregisterControllerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeregisterControllerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeregisterControllerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeregisterControllerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeregisterControllerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateGovernanceKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.GovernanceKey.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *UpdateGovernanceKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RegisterControllerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RegisterControllerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeregisterControllerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *DeregisterControllerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateGovernanceKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGovernanceKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGovernanceKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovernanceKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GovernanceKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGovernanceKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGovernanceKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGovernanceKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterControllerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterControllerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterControllerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = append(m.Controller[:0], dAtA[iNdEx:postIndex]...)
			if m.Controller == nil {
				m.Controller = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterControllerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterControllerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterControllerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeregisterControllerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeregisterControllerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeregisterControllerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = append(m.Controller[:0], dAtA[iNdEx:postIndex]...)
			if m.Controller == nil {
				m.Controller = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeregisterControllerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeregisterControllerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeregisterControllerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
