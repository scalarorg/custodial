// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/utils/v1beta1/bitmap.proto

package utils

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Bitmap struct {
	TrueCountCache *CircularBuffer `protobuf:"bytes,2,opt,name=true_count_cache,json=trueCountCache,proto3" json:"true_count_cache,omitempty"`
}

func (m *Bitmap) Reset()         { *m = Bitmap{} }
func (m *Bitmap) String() string { return proto.CompactTextString(m) }
func (*Bitmap) ProtoMessage()    {}
func (*Bitmap) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae5c3a6fa8d8c8d, []int{0}
}
func (m *Bitmap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bitmap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bitmap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bitmap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bitmap.Merge(m, src)
}
func (m *Bitmap) XXX_Size() int {
	return m.Size()
}
func (m *Bitmap) XXX_DiscardUnknown() {
	xxx_messageInfo_Bitmap.DiscardUnknown(m)
}

var xxx_messageInfo_Bitmap proto.InternalMessageInfo

type CircularBuffer struct {
	CumulativeValue []uint64 `protobuf:"varint,1,rep,packed,name=cumulative_value,json=cumulativeValue,proto3" json:"cumulative_value,omitempty"`
	Index           int32    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	MaxSize         int32    `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (m *CircularBuffer) Reset()         { *m = CircularBuffer{} }
func (m *CircularBuffer) String() string { return proto.CompactTextString(m) }
func (*CircularBuffer) ProtoMessage()    {}
func (*CircularBuffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae5c3a6fa8d8c8d, []int{1}
}
func (m *CircularBuffer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CircularBuffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CircularBuffer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CircularBuffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircularBuffer.Merge(m, src)
}
func (m *CircularBuffer) XXX_Size() int {
	return m.Size()
}
func (m *CircularBuffer) XXX_DiscardUnknown() {
	xxx_messageInfo_CircularBuffer.DiscardUnknown(m)
}

var xxx_messageInfo_CircularBuffer proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Bitmap)(nil), "scalar.utils.v1beta1.Bitmap")
	proto.RegisterType((*CircularBuffer)(nil), "scalar.utils.v1beta1.CircularBuffer")
}

func init() { proto.RegisterFile("scalar/utils/v1beta1/bitmap.proto", fileDescriptor_5ae5c3a6fa8d8c8d) }

var fileDescriptor_5ae5c3a6fa8d8c8d = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x5b, 0xe7, 0xa6, 0x44, 0x98, 0xa3, 0xf4, 0x50, 0x3d, 0x84, 0x39, 0x44, 0xe6, 0xc1,
	0x94, 0xe9, 0x1b, 0xb4, 0x9e, 0x3d, 0x54, 0x10, 0xf1, 0x52, 0xd2, 0xf8, 0xad, 0x0b, 0xa4, 0xcb,
	0x48, 0x93, 0x52, 0xf6, 0x14, 0x3e, 0xd6, 0x8e, 0x3b, 0x7a, 0xd4, 0xf6, 0x45, 0xa4, 0xe9, 0x40,
	0x04, 0x6f, 0x5f, 0xfe, 0xf9, 0xfd, 0x42, 0xbe, 0x3f, 0xba, 0x2a, 0x19, 0x15, 0x54, 0x85, 0x46,
	0x73, 0x51, 0x86, 0xd5, 0x22, 0x03, 0x4d, 0x17, 0x61, 0xc6, 0x75, 0x41, 0x37, 0x64, 0xa3, 0xa4,
	0x96, 0x9e, 0xdf, 0x23, 0xc4, 0x22, 0xe4, 0x80, 0x5c, 0xfa, 0xb9, 0xcc, 0xa5, 0x05, 0xc2, 0x6e,
	0xea, 0xd9, 0xd9, 0x2b, 0x1a, 0x45, 0xd6, 0xf5, 0x9e, 0xd0, 0x44, 0x2b, 0x03, 0x29, 0x93, 0x66,
	0xad, 0x53, 0x46, 0xd9, 0x0a, 0x82, 0xa3, 0xa9, 0x3b, 0x3f, 0xbb, 0xbf, 0x26, 0xff, 0x3d, 0x48,
	0x62, 0xae, 0x98, 0x11, 0x54, 0x45, 0x66, 0xb9, 0x04, 0x95, 0x8c, 0x3b, 0x3b, 0xee, 0xe4, 0xb8,
	0x73, 0x67, 0x02, 0x8d, 0xff, 0x12, 0xde, 0x2d, 0x9a, 0x30, 0x53, 0x18, 0x41, 0x35, 0xaf, 0x20,
	0xad, 0xa8, 0x30, 0x10, 0xb8, 0xd3, 0xc1, 0xfc, 0x38, 0x39, 0xff, 0xcd, 0x5f, 0xba, 0xd8, 0xf3,
	0xd1, 0x90, 0xaf, 0xdf, 0xa1, 0xb6, 0x3f, 0x18, 0x26, 0xfd, 0xc1, 0xbb, 0x40, 0xa7, 0x05, 0xad,
	0xd3, 0x92, 0x6f, 0x21, 0x18, 0xd8, 0x8b, 0x93, 0x82, 0xd6, 0xcf, 0x7c, 0x0b, 0xd1, 0xe3, 0xee,
	0x1b, 0x3b, 0xbb, 0x06, 0xbb, 0xfb, 0x06, 0xbb, 0x5f, 0x0d, 0x76, 0x3f, 0x5a, 0xec, 0xec, 0x5b,
	0xec, 0x7c, 0xb6, 0xd8, 0x79, 0xbb, 0xc9, 0xb9, 0x5e, 0x99, 0x8c, 0x30, 0x59, 0x84, 0xfd, 0x2e,
	0x52, 0xe5, 0x87, 0xe9, 0x8e, 0x49, 0x05, 0x7d, 0x9d, 0xd9, 0xc8, 0x96, 0xf2, 0xf0, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xe5, 0xee, 0xa9, 0x42, 0x65, 0x01, 0x00, 0x00,
}

func (m *Bitmap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bitmap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bitmap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TrueCountCache != nil {
		{
			size, err := m.TrueCountCache.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBitmap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CircularBuffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CircularBuffer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CircularBuffer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSize != 0 {
		i = encodeVarintBitmap(dAtA, i, uint64(m.MaxSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintBitmap(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CumulativeValue) > 0 {
		dAtA3 := make([]byte, len(m.CumulativeValue)*10)
		var j2 int
		for _, num := range m.CumulativeValue {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintBitmap(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBitmap(dAtA []byte, offset int, v uint64) int {
	offset -= sovBitmap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bitmap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrueCountCache != nil {
		l = m.TrueCountCache.Size()
		n += 1 + l + sovBitmap(uint64(l))
	}
	return n
}

func (m *CircularBuffer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CumulativeValue) > 0 {
		l = 0
		for _, e := range m.CumulativeValue {
			l += sovBitmap(uint64(e))
		}
		n += 1 + sovBitmap(uint64(l)) + l
	}
	if m.Index != 0 {
		n += 1 + sovBitmap(uint64(m.Index))
	}
	if m.MaxSize != 0 {
		n += 1 + sovBitmap(uint64(m.MaxSize))
	}
	return n
}

func sovBitmap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBitmap(x uint64) (n int) {
	return sovBitmap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bitmap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bitmap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bitmap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrueCountCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBitmap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBitmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrueCountCache == nil {
				m.TrueCountCache = &CircularBuffer{}
			}
			if err := m.TrueCountCache.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBitmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CircularBuffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CircularBuffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CircularBuffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBitmap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CumulativeValue = append(m.CumulativeValue, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBitmap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBitmap
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBitmap
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CumulativeValue) == 0 {
					m.CumulativeValue = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBitmap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CumulativeValue = append(m.CumulativeValue, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeValue", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBitmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBitmap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBitmap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBitmap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBitmap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBitmap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBitmap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBitmap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBitmap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBitmap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBitmap = fmt.Errorf("proto: unexpected end of group")
)
