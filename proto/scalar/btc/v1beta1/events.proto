syntax = "proto3";
package scalar.btc.v1beta1;

import "gogoproto/gogo.proto";
import "scalar/btc/v1beta1/types.proto";

option go_package = "github.com/scalarorg/scalar-core/x/btc/types";
option (gogoproto.goproto_getters_all) = false;

message VoteEvents {
  string chain = 1
      [ (gogoproto.casttype) =
            "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" ];
  repeated Event events = 2 [ (gogoproto.nullable) = false ];
}

message Event {
  enum Status {
    option (gogoproto.goproto_enum_prefix) = false;
    option (gogoproto.goproto_enum_stringer) = true;

    STATUS_UNSPECIFIED = 0
        [ (gogoproto.enumvalue_customname) = "EventNonExistent" ];
    STATUS_CONFIRMED = 1
        [ (gogoproto.enumvalue_customname) = "EventConfirmed" ];
    STATUS_COMPLETED = 2
        [ (gogoproto.enumvalue_customname) = "EventCompleted" ];
    STATUS_FAILED = 3 [ (gogoproto.enumvalue_customname) = "EventFailed" ];
  }

  string chain = 1
      [ (gogoproto.casttype) =
            "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" ];
  bytes tx_id = 2 [
    (gogoproto.customname) = "TxID",
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "Hash"
  ];
  Status status = 3;
  uint64 index = 4;
  oneof event { EventStakingTx staking_tx = 5; }
}

message EventStakingTx {
  string prev_out_point = 1;
  uint64 amount = 2;
  string asset = 3;
  bytes payload_hash = 4 [
    (gogoproto.customtype) =
        "github.com/axelarnetwork/axelar-core/x/evm/types.Hash",
    (gogoproto.nullable) = false
  ];
  StakingTxMetadata metadata = 5 [ (gogoproto.nullable) = false ];
}